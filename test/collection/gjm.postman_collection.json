{
	"info": {
		"_postman_id": "6eff4b0c-be2d-44c3-8009-80b54ec3fd5d",
		"name": "gjm",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "appointments",
			"item": [
				{
					"name": "get",
					"item": [
						{
							"name": "filter",
							"item": [
								{
									"name": "get appointments - success - filter (after)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const appointmentSchema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        \"type\": \"array\",\r",
													"        \"items\": appointmentSchema\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData[0].title).to.eql(\"test-getappointments-filter-title-2\");\r",
													"    pm.expect(jsonData[1].title).to.eql(\"test-getappointments-filter-title-1\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments?after=2021-05-03T08:05:24.000Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											],
											"query": [
												{
													"key": "after",
													"value": "2021-05-03T08:05:24.000Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get appointments - success - filter (after)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const appointmentSchema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        \"type\": \"array\",\r",
													"        \"items\": appointmentSchema\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData[0].title).to.eql(\"test-getappointments-filter-title-8\");\r",
													"    pm.expect(jsonData[1].title).to.eql(\"test-getappointments-filter-title-7\");\r",
													"    pm.expect(jsonData[2].title).to.eql(\"test-getappointments-filter-title-6\");\r",
													"    pm.expect(jsonData[3].title).to.eql(\"test-getappointments-filter-title-5\");\r",
													"    pm.expect(jsonData[4].title).to.eql(\"test-getappointments-filter-title-4\");\r",
													"    pm.expect(jsonData[5].title).to.eql(\"test-getappointments-filter-title-3\");\r",
													"    pm.expect(jsonData[6].title).to.eql(\"test-getappointments-filter-title-2\");\r",
													"    pm.expect(jsonData[7].title).to.eql(\"test-getappointments-filter-title-1\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments?after=2021-05-09T08:05:24.000Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											],
											"query": [
												{
													"key": "after",
													"value": "2021-05-09T08:05:24.000Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get appointments - failure - filter (after)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_filter_after\", \"assadsda\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INVALID_PARAMETERS\",\r",
													"        \"message\": \"Given parameters can not be processed\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"after\",\r",
													"            \"in\": \"query\",\r",
													"            \"value\": pm.variables.get(\"appointment_filter_after\"),\r",
													"            \"message\": \"The provided Date can not be parsed\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments?after={{appointment_filter_after}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											],
											"query": [
												{
													"key": "after",
													"value": "{{appointment_filter_after}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get appointments - success - filter (before)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const appointmentSchema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        \"type\": \"array\",\r",
													"        \"items\": appointmentSchema\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData[0].title).to.eql(\"test-getappointments-filter-title-10\");\r",
													"    pm.expect(jsonData[1].title).to.eql(\"test-getappointments-filter-title-9\");\r",
													"    pm.expect(jsonData[2].title).to.eql(\"test-getappointments-filter-title-8\");\r",
													"    pm.expect(jsonData[3].title).to.eql(\"test-getappointments-filter-title-7\");\r",
													"    pm.expect(jsonData[4].title).to.eql(\"test-getappointments-filter-title-6\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments?before=2021-05-05T08:05:24.000Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											],
											"query": [
												{
													"key": "before",
													"value": "2021-05-05T08:05:24.000Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get appointments - success - filter (before)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const appointmentSchema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        \"type\": \"array\",\r",
													"        \"items\": appointmentSchema\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData[0].title).to.eql(\"test-getappointments-filter-title-10\");\r",
													"    pm.expect(jsonData[1].title).to.eql(\"test-getappointments-filter-title-9\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments?before=2021-05-08T08:05:24.000Z",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											],
											"query": [
												{
													"key": "before",
													"value": "2021-05-08T08:05:24.000Z"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get appointments - failure - filter (before)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_filter_before\", \"assadsda\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INVALID_PARAMETERS\",\r",
													"        \"message\": \"Given parameters can not be processed\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"before\",\r",
													"            \"in\": \"query\",\r",
													"            \"value\": pm.variables.get(\"appointment_filter_before\"),\r",
													"            \"message\": \"The provided Date can not be parsed\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments?before={{appointment_filter_before}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											],
											"query": [
												{
													"key": "before",
													"value": "{{appointment_filter_before}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get appointments - success - filter (before) Copy 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const appointmentSchema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema({\r",
													"        \"type\": \"array\",\r",
													"        \"items\": appointmentSchema\r",
													"    });\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData[0].title).to.eql(\"test-getappointments-filter-title-10\");\r",
													"    pm.expect(jsonData[1].title).to.eql(\"test-getappointments-filter-title-9\");\r",
													"    pm.expect(jsonData[2].title).to.eql(\"test-getappointments-filter-title-8\");\r",
													"    pm.expect(jsonData[3].title).to.eql(\"test-getappointments-filter-title-7\");\r",
													"    pm.expect(jsonData[4].title).to.eql(\"test-getappointments-filter-title-6\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments?limit=5",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											],
											"query": [
												{
													"key": "limit",
													"value": "5"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "get appointments - failure - filter (before) Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_filter_limit\", \"assadsda\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 422\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INVALID_PARAMETERS\",\r",
													"        \"message\": \"Given parameters can not be processed\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"limit\",\r",
													"            \"in\": \"query\",\r",
													"            \"value\": pm.variables.get(\"appointment_filter_limit\"),\r",
													"            \"message\": \"The provided number can not be processed\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments?limit={{appointment_filter_limit}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											],
											"query": [
												{
													"key": "limit",
													"value": "{{appointment_filter_limit}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_getappointments_filter}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_getappointments_filter\");",
											"const password = pm.environment.get(\"keycloak_password_getappointments_filter\");",
											"",
											"const tokenVariableName = 'bearer_getappointments_filter';",
											"const tokenExpriyDateVariableName = 'bearer_getappointments_filter_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "get appointments (creator, admin, enrollmentCreator, enrollmentPermission, pin as user, pin with link) Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.expect(pm.response.code).to.equal(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Valid schema\", () => {\r",
											"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
											"    const appointmentSchema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
											"\r",
											"    pm.response.to.have.jsonSchema({\r",
											"        \"type\": \"array\",\r",
											"        \"items\": appointmentSchema\r",
											"    });\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    const jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData[0].relations).lengthOf(1);\r",
											"    pm.expect(jsonData[0].relations[0]).to.eql(\"PINNED\");\r",
											"    pm.expect(jsonData[1].relations).lengthOf(1);\r",
											"    pm.expect(jsonData[1].relations[0]).to.eql(\"PINNED\");\r",
											"    pm.expect(jsonData[2].relations).lengthOf(1);\r",
											"    pm.expect(jsonData[2].relations[0]).to.eql(\"ENROLLED\");\r",
											"    pm.expect(jsonData[3].relations).lengthOf(1);\r",
											"    pm.expect(jsonData[3].relations[0]).to.eql(\"ENROLLED\");\r",
											"    pm.expect(jsonData[4].relations).lengthOf(1);\r",
											"    pm.expect(jsonData[4].relations[0]).to.eql(\"ADMIN\");\r",
											"    pm.expect(jsonData[5].relations).lengthOf(1);\r",
											"    pm.expect(jsonData[5].relations[0]).to.eql(\"CREATOR\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/appointments?pin1=test-getappointments-default-pin-link-link&perm1=4bc8aa7c-6cc8-4811-b672-2bd6601254aa&token1=a4a06bcd38b56c027015b00284c7b5a394467215afbc51936f8b6026776acb80",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"appointments"
									],
									"query": [
										{
											"key": "pin1",
											"value": "test-getappointments-default-pin-link-link"
										},
										{
											"key": "perm1",
											"value": "4bc8aa7c-6cc8-4811-b672-2bd6601254aa"
										},
										{
											"key": "token1",
											"value": "a4a06bcd38b56c027015b00284c7b5a394467215afbc51936f8b6026776acb80"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{bearer_getappointments}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const username = pm.environment.get(\"keycloak_username_getappointments\");",
									"const password = pm.environment.get(\"keycloak_password_getappointments\");",
									"",
									"const tokenVariableName = 'bearer_getappointments';",
									"const tokenExpriyDateVariableName = 'bearer_getappointments_expiry_date';",
									"",
									"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
									"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "create",
					"item": [
						{
							"name": "main",
							"item": [
								{
									"name": "create Appointment - success - minimalist",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_link\", jsonData.link);\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_title\", pm.variables.get(\"appointment_creation_title\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_location\", pm.variables.get(\"appointment_creation_location\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_description\", pm.variables.get(\"appointment_creation_description\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_date\", pm.variables.get(\"appointment_creation_date\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_deadline\", pm.variables.get(\"appointment_creation_deadline\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get created appointment  - minimalist",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    var date_unix_orig = Date.parse(jsonData.date);\r",
													"    var date_final_orig = moment(date_unix_orig).format(\"YYYY-MM-DDThh:mm:ss.sZ\");\r",
													"\r",
													"    var date_unix = Date.parse(pm.collectionVariables.get(\"VALIDATION_appointment_creation_date\"));\r",
													"    var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mm:ss.sZ\");\r",
													"\r",
													"    var deadline_unix_orig = Date.parse(jsonData.deadline);\r",
													"    var deadline_final_orig = moment(deadline_unix_orig).format(\"YYYY-MM-DDThh:mm:ss.sZ\");\r",
													"\r",
													"    var deadline_unix = Date.parse(pm.collectionVariables.get(\"VALIDATION_appointment_creation_deadline\"));\r",
													"    var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mm:ss.sZ\");\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_id\"));\r",
													"    pm.expect(jsonData.link).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_link\"));\r",
													"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_title\"));\r",
													"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_description\"));\r",
													"    pm.expect(jsonData.location).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_location\"));\r",
													"    pm.expect(date_final_orig).to.eql(date_final);\r",
													"    pm.expect(deadline_final_orig).to.eql(deadline_final);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{VALIDATION_appointment_creation_location_header}}",
											"host": [
												"{{VALIDATION_appointment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get created appointment - minimalist - optional defaults",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.hidden).to.eql(false);\r",
													"    pm.expect(jsonData.driverAddition).to.eql(false);\r",
													"\r",
													"    pm.expect(jsonData).to.not.have.property('additions');\r",
													"    pm.expect(jsonData).to.not.have.property('files');\r",
													"    pm.expect(jsonData).to.not.have.property('administrators');\r",
													"    pm.expect(jsonData).to.not.have.property('enrollments');\r",
													"\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{VALIDATION_appointment_creation_location_header}}",
											"host": [
												"{{VALIDATION_appointment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Appointment - success - optionals",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);\r",
													"\r",
													"pm.variables.set(\"appointment_creation_hidden\", true);\r",
													"pm.variables.set(\"appointment_creation_driverAddition\", true);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_link\", jsonData.link);\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_driverAddition\", pm.variables.get(\"appointment_creation_driverAddition\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\",\r\n    \"hidden\": \"{{appointment_creation_hidden}}\",\r\n    \"driverAddition\": \"{{appointment_creation_driverAddition}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get created appointment - optionals defaults",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_id\"));\r",
													"    pm.expect(jsonData.link).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_link\"));\r",
													"\r",
													"    pm.expect(jsonData.driverAddition).to.eql(pm.variables.get(\"VALIDATION_appointment_creation_driverAddition\"));\r",
													"\r",
													"    pm.expect(jsonData).to.not.have.property('additions');\r",
													"    pm.expect(jsonData).to.not.have.property('files');\r",
													"    pm.expect(jsonData).to.not.have.property('administrators');\r",
													"    pm.expect(jsonData).to.not.have.property('enrollments');\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{VALIDATION_appointment_creation_location_header}}",
											"host": [
												"{{VALIDATION_appointment_creation_location_header}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "link",
							"item": [
								{
									"name": "create Appointment - success - link - no link",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get created appointment - link - no link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_id\"));\r",
													"    pm.expect(jsonData.link).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_link\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{VALIDATION_appointment_creation_location_header}}",
											"host": [
												"{{VALIDATION_appointment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Appointment - success - link - custom link",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_link\", \"test-POSTMAN-createappointment-link-\" +  pm.globals.replaceIn('{{$randomPassword}}'));\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Link has set value\", function () {\r",
													"    pm.expect(jsonData.link).to.equal(pm.variables.get(\"appointment_creation_link\"));\r",
													"});\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"link\": \"{{appointment_creation_link}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get created appointment - link - custom link",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_id\"));\r",
													"    pm.expect(jsonData.link).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_link\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{VALIDATION_appointment_creation_location_header}}",
											"host": [
												"{{VALIDATION_appointment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Appointment - failure - link - in use",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_creation_link\", 'test-createappointment-existinglink-link');\r",
													"\r",
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Failed POST request\", function () {\r",
													"    pm.response.to.have.status(409);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"DUPLICATE_VALUES\",\r",
													"        \"message\": \"Provided values are already in use\",\r",
													"        \"data\": [\r",
													"            {\r",
													"                \"attribute\": \"link\",\r",
													"                \"value\": pm.variables.get(\"appointment_creation_link\"),\r",
													"                \"message\": \"Value is already in use by other appointment. Specify a different link\"\r",
													"            }\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"link\": \"{{appointment_creation_link}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/appointments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "date",
							"item": [
								{
									"name": "create Appointment - failure - date - invalid date - date < deadline",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Failed POST request\", function () {\r",
													"    pm.response.to.have.status(422);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INVALID_VALUES\",\r",
													"        \"message\": \"Given values can not be processed\",\r",
													"        \"data\": [\r",
													"            {\r",
													"                \"attribute\": \"deadline\",\r",
													"                \"value\": pm.variables.get(\"appointment_creation_deadline\"),\r",
													"                \"message\": \"The specified deadline is timed after the date\"\r",
													"            }\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/appointments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "additions",
							"item": [
								{
									"name": "create Appointment - success - additions",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);\r",
													"\r",
													"pm.variables.set(\"appointment_creation_addition_1_name\",  \"test-POSTMAN-createappointment-addition-1-name\");\r",
													"pm.variables.set(\"appointment_creation_addition_2_name\",  \"test-POSTMAN-createappointment-addition-2-name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_link\", jsonData.link);\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_addition_1_name\", pm.variables.get('appointment_creation_addition_1_name'));\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_addition_2_name\", pm.variables.get('appointment_creation_addition_2_name'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\",\r\n    \"additions\": [{\r\n        \"name\": \"{{appointment_creation_addition_1_name}}\"\r\n    },{\r\n        \"name\": \"{{appointment_creation_addition_2_name}}\"\r\n    }]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get created appointment - additions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_id\"));\r",
													"    pm.expect(jsonData.link).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_link\"));\r",
													"\r",
													"    pm.expect(jsonData.additions).to.have.lengthOf(2);\r",
													"    pm.expect(jsonData.additions[0].name).to.eql(pm.collectionVariables.get('VALIDATION_appointment_creation_addition_1_name'));\r",
													"    pm.expect(jsonData.additions[1].name).to.eql(pm.collectionVariables.get('VALIDATION_appointment_creation_addition_2_name'));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{VALIDATION_appointment_creation_location_header}}",
											"host": [
												"{{VALIDATION_appointment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Appointment - failure - additions - duplicate names",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);\r",
													"pm.variables.set(\"appointment_creation_driverAddition\",  false);\r",
													"\r",
													"pm.variables.set(\"appointment_creation_addition_1_name\",  \"test-POSTMAN-createappointment-addition-1-name\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Failed GET request\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"DUPLICATE_ENTRY\",\r",
													"        \"message\": \"Following values are duplicates and can not be used\",\r",
													"        \"data\": [\r",
													"            {\r",
													"                \"object\": \"addition\",\r",
													"                \"attribute\": \"name\",\r",
													"                \"value\": pm.variables.get(\"appointment_creation_addition_1_name\"),\r",
													"                \"in\": \"body\"\r",
													"            }\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\",\r\n    \"additions\": [{\r\n        \"name\": \"{{appointment_creation_addition_1_name}}\"\r\n    }, {\r\n        \"name\": \"{{appointment_creation_addition_1_name}}\"\r\n    }]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "http://localhost:3000/appointments",
											"protocol": "http",
											"host": [
												"localhost"
											],
											"port": "3000",
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "maxEnrollments",
							"item": [
								{
									"name": "create Appointment - success - maxEnrollments",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\",\r\n    \"maxEnrollments\": \"{{appointment_creation_maxEnrollments}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get created appointment - maxEnrollments",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_id\"));\r",
													"    pm.expect(jsonData.link).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_link\"));\r",
													"});\r",
													"\r",
													"pm.test(\"MaxEnrollments missing\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.not.have.property(\"maxEnrollments\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{VALIDATION_appointment_creation_location_header}}",
											"host": [
												"{{VALIDATION_appointment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Appointment - success - maxEnrollments - neg. to null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);\r",
													"\r",
													"pm.variables.set(\"appointment_creation_maxEnrollments\",  -1);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\",\r\n    \"maxEnrollments\": \"{{appointment_creation_maxEnrollments}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get created appointment - maxEnrollments - neg. to null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_id\"));\r",
													"    pm.expect(jsonData.link).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_link\"));\r",
													"});\r",
													"\r",
													"pm.test(\"MaxEnrollments missing\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.not.have.property(\"maxEnrollments\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{VALIDATION_appointment_creation_location_header}}",
											"host": [
												"{{VALIDATION_appointment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Appointment - success - maxEnrollments - 0 to null",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"appointment_creation_title\", pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"appointment_creation_description\", pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"appointment_creation_location\",  pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);\r",
													"\r",
													"pm.variables.set(\"appointment_creation_maxEnrollments\",  0);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_id\", jsonData.id);\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_creation_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\",\r\n    \"maxEnrollments\": \"{{appointment_creation_maxEnrollments}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get created appointment - maxEnrollments - 0 to null",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_id\"));\r",
													"    pm.expect(jsonData.link).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_creation_link\"));\r",
													"});\r",
													"\r",
													"pm.test(\"MaxEnrollments missing\", () => {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.not.have.property(\"maxEnrollments\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{VALIDATION_appointment_creation_location_header}}",
											"host": [
												"{{VALIDATION_appointment_creation_location_header}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PROTECTION CHECK - create Appointment",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const moment = require('moment');\r",
											"\r",
											"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
											"var date_unix = Date.parse(date);\r",
											"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
											"\r",
											"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
											"var deadline_unix = Date.parse(deadline);\r",
											"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
											"\r",
											"pm.variables.set(\"appointment_creation_title\", \"test-POSTMAN-createappointment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
											"pm.variables.set(\"appointment_creation_description\", \"test-POSTMAN-createappointment-description-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
											"pm.variables.set(\"appointment_creation_location\",  \"test-POSTMAN-createappointment-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
											"pm.variables.set(\"appointment_creation_date\",  date_final);\r",
											"pm.variables.set(\"appointment_creation_deadline\",  deadline_final);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"statusCode\": 401,\r",
											"        \"message\": \"Missing or invalid Authorization header\",\r",
											"        \"error\": \"Unauthorized\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"title\": \"{{appointment_creation_title}}\",\r\n    \"description\": \"{{appointment_creation_description}}\",\r\n    \"location\": \"{{appointment_creation_location}}\",\r\n    \"date\": \"{{appointment_creation_date}}\",\r\n    \"deadline\": \"{{appointment_creation_deadline}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/appointments",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"appointments"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{bearer_createappointment}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const username = pm.environment.get(\"keycloak_username_createappointment\");",
									"const password = pm.environment.get(\"keycloak_password_createappointment\");",
									"",
									"const tokenVariableName = 'bearer_createappointment';",
									"const tokenExpriyDateVariableName = 'bearer_createappointment_expiry_date';",
									"",
									"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
									"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "{link}",
					"item": [
						{
							"name": "get",
							"item": [
								{
									"name": "main",
									"item": [
										{
											"name": "creator",
											"item": [
												{
													"name": "get appointment by link - success - default - auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.eql({\r",
																	"        \"relations\": [\r",
																	"            \"CREATOR\"\r",
																	"        ],\r",
																	"        \"id\": \"5163f213-c168-408c-ad63-4faa7ec61ae5\",\r",
																	"        \"title\": \"test-getappointment-default-title\",\r",
																	"        \"description\": \"test-getappointment-default-description\",\r",
																	"        \"link\": \"test-getappointment-default-link\",\r",
																	"        \"location\": \"test-getappointment-default-location\",\r",
																	"        \"date\": \"2021-03-01T09:05:23.000Z\",\r",
																	"        \"deadline\": \"2021-01-01T19:05:23.000Z\",\r",
																	"        \"hidden\": false,\r",
																	"        \"driverAddition\": false,\r",
																	"        \"iat\": \"2021-03-14T19:05:23.000Z\",\r",
																	"        \"lud\": \"2021-03-14T19:05:23.000Z\",\r",
																	"        \"creator\": {\r",
																	"            \"name\": \"GJM-TestUser GetAppointment\",\r",
																	"            \"username\": \"gjm-test-getappointment-user\"\r",
																	"        }\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"get_appointment_link\", \"test-getappointment-default-link\")"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{get_appointment_link}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "no creator",
											"item": [
												{
													"name": "get appointment by link - success - default - admin",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.not.have.property(\"iat\");\r",
																	"    pm.expect(jsonData).to.not.have.property(\"lud\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"get_appointment_link\", \"test-getappointment-default-link\")\r",
																	"\r",
																	"const username = pm.environment.get(\"keycloak_username_getappointment-admin\");\r",
																	"const password = pm.environment.get(\"keycloak_password_getappointment-admin\");\r",
																	"\r",
																	"const tokenVariableName = 'bearer_getappointment-admin';\r",
																	"const tokenExpriyDateVariableName = 'bearer_getappointment-admin_expiry_date';\r",
																	"\r",
																	"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
																	"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "bearer",
															"bearer": [
																{
																	"key": "token",
																	"value": "{{bearer_getappointment-admin}}",
																	"type": "string"
																}
															]
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{get_appointment_link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "get appointment by link - success - default - no auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.not.have.property(\"iat\");\r",
																	"    pm.expect(jsonData).to.not.have.property(\"lud\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"get_appointment_link\", \"test-getappointment-default-link\")"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{get_appointment_link}}"
															]
														}
													},
													"response": []
												}
											],
											"auth": {
												"type": "noauth"
											},
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												},
												{
													"listen": "test",
													"script": {
														"type": "text/javascript",
														"exec": [
															""
														]
													}
												}
											]
										},
										{
											"name": "__slim",
											"item": []
										},
										{
											"name": "get appointment by link - failure 404",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Failed GET request\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"NOT_FOUND\",\r",
															"        \"message\": \"Requested resource could not be located\",\r",
															"        \"data\": {\r",
															"            \"attribute\": \"link\",\r",
															"            \"in\": \"path\",\r",
															"            \"value\": pm.variables.get(\"get_appointment_link\"),\r",
															"            \"message\": \"Specified appointment does not exist\"\r",
															"        }\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"get_appointment_link\", \"INVALID_LINK\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{get_appointment_link}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "references",
									"item": [
										{
											"name": "get appointment by link - success - relations (appointment creator)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.relations).to.eql([\"CREATOR\"]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"get_appointment_link\", \"test-getappointment-relations-link\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{get_appointment_link}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get appointment by link - success - relations (appointment admin)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.relations).to.eql([\"ADMIN\"]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"get_appointment_link\", \"test-getappointment-relations-admin-link\")\r",
															"\r",
															"const username = pm.environment.get(\"keycloak_username_getappointment-admin\");\r",
															"const password = pm.environment.get(\"keycloak_password_getappointment-admin\");\r",
															"\r",
															"const tokenVariableName = 'bearer_getappointment-admin';\r",
															"const tokenExpriyDateVariableName = 'bearer_getappointment-admin_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_getappointment-admin}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{get_appointment_link}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get appointment by link - success - relations (enrolled - as enrollment creator)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.relations).to.eql([\"ENROLLED\"]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"get_appointment_link\", \"test-getappointment-relations-enrolled-link\")\r",
															"\r",
															"const username = pm.environment.get(\"keycloak_username_getappointment-enrollmentcreator\");\r",
															"const password = pm.environment.get(\"keycloak_password_getappointment-enrollmentcreator\");\r",
															"\r",
															"const tokenVariableName = 'bearer_getappointment-enrollmentcreator';\r",
															"const tokenExpriyDateVariableName = 'bearer_getappointment-enrollmentcreator_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_getappointment-enrollmentcreator}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{get_appointment_link}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "get appointment by link - success - relations (enrolled - token permission)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.relations).to.eql([\"ENROLLED\"]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"get_appointment_link\", \"test-getappointment-relations-enrolled-link\")\r",
															"\r",
															"const username = pm.environment.get(\"keycloak_username_getappointment-enrollmentcreator\");\r",
															"const password = pm.environment.get(\"keycloak_password_getappointment-enrollmentcreator\");\r",
															"\r",
															"const tokenVariableName = 'bearer_getappointment-enrollmentcreator';\r",
															"const tokenExpriyDateVariableName = 'bearer_getappointment-enrollmentcreator_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}?perm1=fa002311-fa84-45dd-8b4a-fed641affb91&token1=8e5ed8bdb47c06d14e11736066b7517c91c36a19daf5d4951ddde281a13a12c4",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{get_appointment_link}}"
													],
													"query": [
														{
															"key": "perm1",
															"value": "fa002311-fa84-45dd-8b4a-fed641affb91"
														},
														{
															"key": "token1",
															"value": "8e5ed8bdb47c06d14e11736066b7517c91c36a19daf5d4951ddde281a13a12c4"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "get appointment by link - success - relations (pinned)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.relations).to.eql([\"PINNED\"]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"get_appointment_link\", \"test-getappointment-relations-pinned-link\")\r",
															"\r",
															"const username = pm.environment.get(\"keycloak_username_getappointment-pinner\");\r",
															"const password = pm.environment.get(\"keycloak_password_getappointment-pinner\");\r",
															"\r",
															"const tokenVariableName = 'bearer_getappointment-pinner';\r",
															"const tokenExpriyDateVariableName = 'bearer_getappointment-pinner_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_getappointment-pinner}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{get_appointment_link}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "administrators",
									"item": [
										{
											"name": "get appointment by link - success - administrators",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.administrators).to.eql([\r",
															"        {\r",
															"            \"name\": \"GJM-TestUser GetAppointment-Admin\",\r",
															"            \"username\": \"gjm-test-getappointment-admin-user\"\r",
															"        }\r",
															"    ]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"get_appointment_link\", \"test-getappointment-administrators-link\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{get_appointment_link}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "additions",
									"item": [
										{
											"name": "get appointment by link - success - additions",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.additions).to.eql([\r",
															"        {\r",
															"            \"id\": \"28a03edc-cde5-4ce3-bb4c-04dcbe85f116\",\r",
															"            \"name\": \"test-getappointment-additions-name-1\",\r",
															"            \"order\": 0\r",
															"        },\r",
															"        {\r",
															"            \"id\": \"74b5eae6-1e5f-47eb-bf46-57f292f56e44\",\r",
															"            \"name\": \"test-getappointment-additions-name-2\",\r",
															"            \"order\": 1\r",
															"        },\r",
															"        {\r",
															"            \"id\": \"16a7edc6-c403-446f-89a1-f1a1d61f9ec9\",\r",
															"            \"name\": \"test-getappointment-additions-name-3\",\r",
															"            \"order\": 2\r",
															"        },\r",
															"        {\r",
															"            \"id\": \"ee59654b-b6cf-4ea2-81a2-8d097a54bd44\",\r",
															"            \"name\": \"test-getappointment-additions-name-4\",\r",
															"            \"order\": 3\r",
															"        }\r",
															"    ]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"get_appointment_link\", \"test-getappointment-additions-link\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{get_appointment_link}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "enrollments",
									"item": [
										{
											"name": "auth",
											"item": [
												{
													"name": "get appointment by link - success - enrollments - auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData.enrollments).to.eql([\r",
																	"        {\r",
																	"            \"id\": \"14bba460-69d8-4238-8d79-5e2106d2998e\",\r",
																	"            \"name\": \"test-getappointment-enrollments-name-2\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-2\",\r",
																	"            \"iat\": \"2021-01-01T04:06:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"33d5cc7c-7278-4ce5-bd1d-d5a527e315c8\",\r",
																	"            \"name\": \"test-getappointment-enrollments-name-4\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-4\",\r",
																	"            \"iat\": \"2021-01-01T04:08:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"77fd09fb-f44b-4646-9e47-e45a0e8d7fc1\",\r",
																	"            \"name\": \"test-getappointment-enrollments-name-3\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-3\",\r",
																	"            \"iat\": \"2021-01-01T04:07:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"7e826bb0-0008-4503-86fa-7ea9f10525d1\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-5-creator\",\r",
																	"            \"iat\": \"2021-01-01T04:09:23.000Z\",\r",
																	"            \"creator\": {\r",
																	"                \"name\": \"GJM-TestUser GetAppointment-EnrollmentCreator\",\r",
																	"                \"username\": \"gjm-test-getappointment-enrollmentcreator-user\"\r",
																	"            }\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"b1bc5530-c9cc-40c1-9280-cf99ec6cc63d\",\r",
																	"            \"name\": \"test-getappointment-enrollments-name-1\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-1\",\r",
																	"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																	"        }\r",
																	"    ]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-link\")"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{get_appointment_link}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "no auth",
											"item": [
												{
													"name": "get appointment by link - success - enrollments - no auth",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData.enrollments).to.eql([\r",
																	"        {\r",
																	"            \"id\": \"14bba460-69d8-4238-8d79-5e2106d2998e\",\r",
																	"            \"name\": \"test-getappointment-enrollments-name-2\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-2\",\r",
																	"            \"iat\": \"2021-01-01T04:06:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"33d5cc7c-7278-4ce5-bd1d-d5a527e315c8\",\r",
																	"            \"name\": \"test-getappointment-enrollments-name-4\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-4\",\r",
																	"            \"iat\": \"2021-01-01T04:08:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"77fd09fb-f44b-4646-9e47-e45a0e8d7fc1\",\r",
																	"            \"name\": \"test-getappointment-enrollments-name-3\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-3\",\r",
																	"            \"iat\": \"2021-01-01T04:07:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"7e826bb0-0008-4503-86fa-7ea9f10525d1\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-5-creator\",\r",
																	"            \"iat\": \"2021-01-01T04:09:23.000Z\",\r",
																	"            \"creator\": {\r",
																	"                \"name\": \"GJM-TestUser GetAppointment-EnrollmentCreator\",\r",
																	"                \"username\": \"gjm-test-getappointment-enrollmentcreator-user\"\r",
																	"            }\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"b1bc5530-c9cc-40c1-9280-cf99ec6cc63d\",\r",
																	"            \"name\": \"test-getappointment-enrollments-name-1\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-comment-1\",\r",
																	"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																	"        }\r",
																	"    ]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-link\")"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"auth": {
															"type": "noauth"
														},
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{get_appointment_link}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "hidden",
											"item": [
												{
													"name": "auth",
													"item": [
														{
															"name": "get appointment by link - success - enrollments (hidden) - auth (creator)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.expect(pm.response.code).to.equal(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Valid schema\", () => {\r",
																			"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																			"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																			"\r",
																			"    pm.response.to.have.jsonSchema(schema);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Correct JSON response data\", function () {\r",
																			"    const jsonData = pm.response.json();\r",
																			"\r",
																			"    pm.expect(jsonData.hidden).to.eql(true);\r",
																			"\r",
																			"    pm.expect(jsonData.enrollments).to.eql([\r",
																			"        {\r",
																			"            \"id\": \"1de9808d-b203-40c3-b6c3-184dd58bfa48\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-5-creator\",\r",
																			"            \"iat\": \"2021-01-01T04:09:23.000Z\",\r",
																			"            \"creator\": {\r",
																			"                \"name\": \"GJM-TestUser GetAppointment-EnrollmentCreator\",\r",
																			"                \"username\": \"gjm-test-getappointment-enrollmentcreator-user\"\r",
																			"            }\r",
																			"        },\r",
																			"        {\r",
																			"            \"id\": \"76975e00-00d2-4b38-b300-4f30d7c2d9de\",\r",
																			"            \"name\": \"test-getappointment-enrollments-hidden-name-1\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-1\",\r",
																			"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																			"        },\r",
																			"        {\r",
																			"            \"id\": \"b31c6c83-c4b3-4526-a94b-703f837be105\",\r",
																			"            \"name\": \"test-getappointment-enrollments-hidden-name-4\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-4\",\r",
																			"            \"iat\": \"2021-01-01T04:08:23.000Z\"\r",
																			"        },\r",
																			"        {\r",
																			"            \"id\": \"d07dcb9c-27cd-436d-88b5-3a1bd6253d11\",\r",
																			"            \"name\": \"test-getappointment-enrollments-hidden-name-3\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-3\",\r",
																			"            \"iat\": \"2021-01-01T04:07:23.000Z\"\r",
																			"        },\r",
																			"        {\r",
																			"            \"id\": \"e0d6c93e-87d9-41c5-b4f5-e53e50b66acd\",\r",
																			"            \"name\": \"test-getappointment-enrollments-hidden-name-2\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-2\",\r",
																			"            \"iat\": \"2021-01-01T04:06:23.000Z\"\r",
																			"        }\r",
																			"    ]);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-hidden-link\")"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"appointments",
																		"{{get_appointment_link}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "get appointment by link - success - enrollments (hidden) - auth (admin)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.expect(pm.response.code).to.equal(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Valid schema\", () => {\r",
																			"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																			"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																			"\r",
																			"    pm.response.to.have.jsonSchema(schema);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Correct JSON response data\", function () {\r",
																			"    const jsonData = pm.response.json();\r",
																			"\r",
																			"    pm.expect(jsonData.hidden).to.eql(true);\r",
																			"\r",
																			"    pm.expect(jsonData.enrollments).to.eql([\r",
																			"        {\r",
																			"            \"id\": \"1de9808d-b203-40c3-b6c3-184dd58bfa48\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-5-creator\",\r",
																			"            \"iat\": \"2021-01-01T04:09:23.000Z\",\r",
																			"            \"creator\": {\r",
																			"                \"name\": \"GJM-TestUser GetAppointment-EnrollmentCreator\",\r",
																			"                \"username\": \"gjm-test-getappointment-enrollmentcreator-user\"\r",
																			"            }\r",
																			"        },\r",
																			"        {\r",
																			"            \"id\": \"76975e00-00d2-4b38-b300-4f30d7c2d9de\",\r",
																			"            \"name\": \"test-getappointment-enrollments-hidden-name-1\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-1\",\r",
																			"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																			"        },\r",
																			"        {\r",
																			"            \"id\": \"b31c6c83-c4b3-4526-a94b-703f837be105\",\r",
																			"            \"name\": \"test-getappointment-enrollments-hidden-name-4\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-4\",\r",
																			"            \"iat\": \"2021-01-01T04:08:23.000Z\"\r",
																			"        },\r",
																			"        {\r",
																			"            \"id\": \"d07dcb9c-27cd-436d-88b5-3a1bd6253d11\",\r",
																			"            \"name\": \"test-getappointment-enrollments-hidden-name-3\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-3\",\r",
																			"            \"iat\": \"2021-01-01T04:07:23.000Z\"\r",
																			"        },\r",
																			"        {\r",
																			"            \"id\": \"e0d6c93e-87d9-41c5-b4f5-e53e50b66acd\",\r",
																			"            \"name\": \"test-getappointment-enrollments-hidden-name-2\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-2\",\r",
																			"            \"iat\": \"2021-01-01T04:06:23.000Z\"\r",
																			"        }\r",
																			"    ]);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"const username = pm.environment.get(\"keycloak_username_getappointment-admin\");\r",
																			"const password = pm.environment.get(\"keycloak_password_getappointment-admin\");\r",
																			"\r",
																			"const tokenVariableName = 'bearer_getappointment-admin';\r",
																			"const tokenExpriyDateVariableName = 'bearer_getappointment-admin_expiry_date';\r",
																			"\r",
																			"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
																			"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);\r",
																			"\r",
																			"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-hidden-link\")"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{bearer_getappointment-admin}}",
																			"type": "string"
																		}
																	]
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"appointments",
																		"{{get_appointment_link}}"
																	]
																}
															},
															"response": []
														},
														{
															"name": "get appointment by link - success - enrollments (hidden) - auth (enrollment creator)",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.expect(pm.response.code).to.equal(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Valid schema\", () => {\r",
																			"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																			"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																			"\r",
																			"    pm.response.to.have.jsonSchema(schema);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Correct JSON response data\", function () {\r",
																			"    const jsonData = pm.response.json();\r",
																			"\r",
																			"    pm.expect(jsonData.hidden).to.eql(true);\r",
																			"\r",
																			"    pm.expect(jsonData.enrollments).to.eql([\r",
																			"        {\r",
																			"            \"id\": \"1de9808d-b203-40c3-b6c3-184dd58bfa48\",\r",
																			"            \"comment\": \"test-getappointment-enrollments-hidden-comment-5-creator\",\r",
																			"            \"iat\": \"2021-01-01T04:09:23.000Z\",\r",
																			"            \"creator\": {\r",
																			"                \"name\": \"GJM-TestUser GetAppointment-EnrollmentCreator\",\r",
																			"                \"username\": \"gjm-test-getappointment-enrollmentcreator-user\"\r",
																			"            }\r",
																			"        }\r",
																			"    ]);\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"const username = pm.environment.get(\"keycloak_username_getappointment-enrollmentcreator\");\r",
																			"const password = pm.environment.get(\"keycloak_password_getappointment-enrollmentcreator\");\r",
																			"\r",
																			"const tokenVariableName = 'bearer_getappointment-enrollmentcreator';\r",
																			"const tokenExpriyDateVariableName = 'bearer_getappointment-enrollmentcreator_expiry_date';\r",
																			"\r",
																			"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
																			"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);\r",
																			"\r",
																			"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-hidden-link\")"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"auth": {
																	"type": "bearer",
																	"bearer": [
																		{
																			"key": "token",
																			"value": "{{bearer_getappointment-enrollmentcreator}}",
																			"type": "string"
																		}
																	]
																},
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"appointments",
																		"{{get_appointment_link}}"
																	]
																}
															},
															"response": []
														}
													]
												},
												{
													"name": "no auth",
													"item": [
														{
															"name": "permissions",
															"item": [
																{
																	"name": "get appointment by link - success - enrollments (hidden) - no auth (permission - 1)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200\", function () {\r",
																					"    pm.expect(pm.response.code).to.equal(200);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Valid schema\", () => {\r",
																					"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																					"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																					"\r",
																					"    pm.response.to.have.jsonSchema(schema);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Correct JSON response data\", function () {\r",
																					"    const jsonData = pm.response.json();\r",
																					"\r",
																					"    pm.expect(jsonData.hidden).to.eql(true);\r",
																					"    pm.expect(jsonData.enrollments).to.eql([\r",
																					"        {\r",
																					"            \"id\": \"76975e00-00d2-4b38-b300-4f30d7c2d9de\",\r",
																					"            \"name\": \"test-getappointment-enrollments-hidden-name-1\",\r",
																					"            \"comment\": \"test-getappointment-enrollments-hidden-comment-1\",\r",
																					"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																					"        }\r",
																					"    ]);\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-hidden-link\")"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}?perm1=76975e00-00d2-4b38-b300-4f30d7c2d9de&token1=c0b1dc74d399b1e8404bcfc31dda8586ce847f0d60195fd521ce1dbfd349218c",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"appointments",
																				"{{get_appointment_link}}"
																			],
																			"query": [
																				{
																					"key": "perm1",
																					"value": "76975e00-00d2-4b38-b300-4f30d7c2d9de"
																				},
																				{
																					"key": "token1",
																					"value": "c0b1dc74d399b1e8404bcfc31dda8586ce847f0d60195fd521ce1dbfd349218c"
																				}
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "get appointment by link - success - enrollments (hidden) - no auth (permission - 2)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200\", function () {\r",
																					"    pm.expect(pm.response.code).to.equal(200);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Valid schema\", () => {\r",
																					"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																					"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																					"\r",
																					"    pm.response.to.have.jsonSchema(schema);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Correct JSON response data\", function () {\r",
																					"    const jsonData = pm.response.json();\r",
																					"\r",
																					"    pm.expect(jsonData.hidden).to.eql(true);\r",
																					"    pm.expect(jsonData.enrollments).to.eql([\r",
																					"        {\r",
																					"            \"id\": \"76975e00-00d2-4b38-b300-4f30d7c2d9de\",\r",
																					"            \"name\": \"test-getappointment-enrollments-hidden-name-1\",\r",
																					"            \"comment\": \"test-getappointment-enrollments-hidden-comment-1\",\r",
																					"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																					"        },\r",
																					"        {\r",
																					"            \"id\": \"e0d6c93e-87d9-41c5-b4f5-e53e50b66acd\",\r",
																					"            \"name\": \"test-getappointment-enrollments-hidden-name-2\",\r",
																					"            \"comment\": \"test-getappointment-enrollments-hidden-comment-2\",\r",
																					"            \"iat\": \"2021-01-01T04:06:23.000Z\"\r",
																					"        }\r",
																					"    ]);\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-hidden-link\")"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}?perm1=76975e00-00d2-4b38-b300-4f30d7c2d9de&token1=c0b1dc74d399b1e8404bcfc31dda8586ce847f0d60195fd521ce1dbfd349218c&perm2=e0d6c93e-87d9-41c5-b4f5-e53e50b66acd&token2=cdac2554459ef8a12ddd702fbd3cc40816cc9d20ad49800770ae92e0895f3ceb",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"appointments",
																				"{{get_appointment_link}}"
																			],
																			"query": [
																				{
																					"key": "perm1",
																					"value": "76975e00-00d2-4b38-b300-4f30d7c2d9de"
																				},
																				{
																					"key": "token1",
																					"value": "c0b1dc74d399b1e8404bcfc31dda8586ce847f0d60195fd521ce1dbfd349218c"
																				},
																				{
																					"key": "perm2",
																					"value": "e0d6c93e-87d9-41c5-b4f5-e53e50b66acd"
																				},
																				{
																					"key": "token2",
																					"value": "cdac2554459ef8a12ddd702fbd3cc40816cc9d20ad49800770ae92e0895f3ceb"
																				}
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "get appointment by link - success - enrollments (hidden) - no auth (permission - 1 valid - 1 invalid token)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200\", function () {\r",
																					"    pm.expect(pm.response.code).to.equal(200);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Valid schema\", () => {\r",
																					"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																					"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																					"\r",
																					"    pm.response.to.have.jsonSchema(schema);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Correct JSON response data\", function () {\r",
																					"    const jsonData = pm.response.json();\r",
																					"\r",
																					"    pm.expect(jsonData.hidden).to.eql(true);\r",
																					"    pm.expect(jsonData.enrollments).to.eql([\r",
																					"        {\r",
																					"            \"id\": \"76975e00-00d2-4b38-b300-4f30d7c2d9de\",\r",
																					"            \"name\": \"test-getappointment-enrollments-hidden-name-1\",\r",
																					"            \"comment\": \"test-getappointment-enrollments-hidden-comment-1\",\r",
																					"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																					"        }\r",
																					"    ]);\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-hidden-link\")"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}?perm1=76975e00-00d2-4b38-b300-4f30d7c2d9de&token1=c0b1dc74d399b1e8404bcfc31dda8586ce847f0d60195fd521ce1dbfd349218c&perm2=e0d6c93e-87d9-41c5-b4f5-e53e50b66acd&token2=INVALID_TOKEN",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"appointments",
																				"{{get_appointment_link}}"
																			],
																			"query": [
																				{
																					"key": "perm1",
																					"value": "76975e00-00d2-4b38-b300-4f30d7c2d9de"
																				},
																				{
																					"key": "token1",
																					"value": "c0b1dc74d399b1e8404bcfc31dda8586ce847f0d60195fd521ce1dbfd349218c"
																				},
																				{
																					"key": "perm2",
																					"value": "e0d6c93e-87d9-41c5-b4f5-e53e50b66acd"
																				},
																				{
																					"key": "token2",
																					"value": "INVALID_TOKEN"
																				}
																			]
																		}
																	},
																	"response": []
																},
																{
																	"name": "get appointment by link - success - enrollments (hidden) - no auth (permission - 1 valid - 1 invalid id but correct token)",
																	"event": [
																		{
																			"listen": "test",
																			"script": {
																				"exec": [
																					"pm.test(\"Status code is 200\", function () {\r",
																					"    pm.expect(pm.response.code).to.equal(200);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Valid schema\", () => {\r",
																					"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																					"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																					"\r",
																					"    pm.response.to.have.jsonSchema(schema);\r",
																					"});\r",
																					"\r",
																					"pm.test(\"Correct JSON response data\", function () {\r",
																					"    const jsonData = pm.response.json();\r",
																					"\r",
																					"    pm.expect(jsonData.hidden).to.eql(true);\r",
																					"    pm.expect(jsonData.enrollments).to.eql([\r",
																					"        {\r",
																					"            \"id\": \"76975e00-00d2-4b38-b300-4f30d7c2d9de\",\r",
																					"            \"name\": \"test-getappointment-enrollments-hidden-name-1\",\r",
																					"            \"comment\": \"test-getappointment-enrollments-hidden-comment-1\",\r",
																					"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																					"        }\r",
																					"    ]);\r",
																					"});"
																				],
																				"type": "text/javascript"
																			}
																		},
																		{
																			"listen": "prerequest",
																			"script": {
																				"exec": [
																					"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-hidden-link\")"
																				],
																				"type": "text/javascript"
																			}
																		}
																	],
																	"request": {
																		"method": "GET",
																		"header": [],
																		"url": {
																			"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}?perm1=76975e00-00d2-4b38-b300-4f30d7c2d9de&token1=c0b1dc74d399b1e8404bcfc31dda8586ce847f0d60195fd521ce1dbfd349218c&perm2=INVALID_ID&token2=84cae6d780d87ed6604db44c426d88cac1a6aab236351c9dbc8d8fa23ac4d87a",
																			"host": [
																				"{{baseUrl}}"
																			],
																			"path": [
																				"appointments",
																				"{{get_appointment_link}}"
																			],
																			"query": [
																				{
																					"key": "perm1",
																					"value": "76975e00-00d2-4b38-b300-4f30d7c2d9de"
																				},
																				{
																					"key": "token1",
																					"value": "c0b1dc74d399b1e8404bcfc31dda8586ce847f0d60195fd521ce1dbfd349218c"
																				},
																				{
																					"key": "perm2",
																					"value": "INVALID_ID"
																				},
																				{
																					"key": "token2",
																					"value": "84cae6d780d87ed6604db44c426d88cac1a6aab236351c9dbc8d8fa23ac4d87a"
																				}
																			]
																		}
																	},
																	"response": []
																}
															]
														},
														{
															"name": "get appointment by link - success - enrollments (hidden) - no auth",
															"event": [
																{
																	"listen": "test",
																	"script": {
																		"exec": [
																			"pm.test(\"Status code is 200\", function () {\r",
																			"    pm.expect(pm.response.code).to.equal(200);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Valid schema\", () => {\r",
																			"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																			"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																			"\r",
																			"    pm.response.to.have.jsonSchema(schema);\r",
																			"});\r",
																			"\r",
																			"pm.test(\"Correct JSON response data\", function () {\r",
																			"    const jsonData = pm.response.json();\r",
																			"\r",
																			"    pm.expect(jsonData.hidden).to.eql(true);\r",
																			"    pm.expect(jsonData).to.not.have.property(\"enrollments\");\r",
																			"});"
																		],
																		"type": "text/javascript"
																	}
																},
																{
																	"listen": "prerequest",
																	"script": {
																		"exec": [
																			"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-hidden-link\")"
																		],
																		"type": "text/javascript"
																	}
																}
															],
															"request": {
																"method": "GET",
																"header": [],
																"url": {
																	"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
																	"host": [
																		"{{baseUrl}}"
																	],
																	"path": [
																		"appointments",
																		"{{get_appointment_link}}"
																	]
																}
															},
															"response": []
														}
													],
													"auth": {
														"type": "noauth"
													},
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														},
														{
															"listen": "test",
															"script": {
																"type": "text/javascript",
																"exec": [
																	""
																]
															}
														}
													]
												}
											]
										},
										{
											"name": "additions",
											"item": [
												{
													"name": "get appointment by link - success - enrollments (additions)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData.enrollments).to.eql([\r",
																	"        {\r",
																	"            \"id\": \"5657eb58-427d-493c-ab88-1af2774572c2\",\r",
																	"            \"name\": \"test-getappointment-enrollments-additions-name-1-no-additions\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-additions-comment-1\",\r",
																	"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"83dd3d7e-de9f-4510-af91-b432c287aa96\",\r",
																	"            \"name\": \"test-getappointment-enrollments-additions-name-3-two-additions\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-additions-comment-3\",\r",
																	"            \"additions\": [\r",
																	"                {\r",
																	"                    \"name\": \"test-getappointment-enrollments-additions-name-1\"\r",
																	"                },\r",
																	"                {\r",
																	"                    \"name\": \"test-getappointment-enrollments-additions-name-3\"\r",
																	"                }\r",
																	"            ],\r",
																	"            \"iat\": \"2021-01-01T04:07:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"ae279597-288b-4479-bc42-b9e887e9d958\",\r",
																	"            \"name\": \"test-getappointment-enrollments-additions-name-2-one-additions\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-additions-comment-2\",\r",
																	"            \"additions\": [\r",
																	"                {\r",
																	"                    \"name\": \"test-getappointment-enrollments-additions-name-1\"\r",
																	"                }\r",
																	"            ],\r",
																	"            \"iat\": \"2021-01-01T04:06:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"ce3ad43e-5c3e-459e-8079-fd7c5c635578\",\r",
																	"            \"name\": \"test-getappointment-enrollments-additions-name-4-all-additions\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-additions-comment-4\",\r",
																	"            \"additions\": [\r",
																	"                {\r",
																	"                    \"name\": \"test-getappointment-enrollments-additions-name-1\"\r",
																	"                },\r",
																	"                {\r",
																	"                    \"name\": \"test-getappointment-enrollments-additions-name-2\"\r",
																	"                },\r",
																	"                {\r",
																	"                    \"name\": \"test-getappointment-enrollments-additions-name-3\"\r",
																	"                },\r",
																	"                {\r",
																	"                    \"name\": \"test-getappointment-enrollments-additions-name-4\"\r",
																	"                }\r",
																	"            ],\r",
																	"            \"iat\": \"2021-01-01T04:08:23.000Z\"\r",
																	"        }\r",
																	"    ]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-additions-link\")"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{get_appointment_link}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "driverAddition",
											"item": [
												{
													"name": "get appointment by link - success - enrollments (additions)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData.driverAddition).to.eql(true);\r",
																	"    pm.expect(jsonData.enrollments).to.eql([\r",
																	"        {\r",
																	"            \"id\": \"05340b4f-2715-4b27-a581-31f6fd78d216\",\r",
																	"            \"name\": \"test-getappointment-enrollments-driver-name-1-nothing\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-driver-comment-1\",\r",
																	"            \"iat\": \"2021-01-01T04:05:23.000Z\"\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"05b806e7-322f-474c-b355-15b6ee77fa5d\",\r",
																	"            \"name\": \"test-getappointment-enrollments-driver-name-3-passenger\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-driver-comment-3\",\r",
																	"            \"iat\": \"2021-01-01T04:07:23.000Z\",\r",
																	"            \"passenger\": {\r",
																	"                \"requirement\": 1\r",
																	"            }\r",
																	"        },\r",
																	"        {\r",
																	"            \"id\": \"490d0848-d19c-4573-a864-a13e0a0ae553\",\r",
																	"            \"name\": \"test-getappointment-enrollments-driver-name-2-driver\",\r",
																	"            \"comment\": \"test-getappointment-enrollments-driver-comment-2\",\r",
																	"            \"iat\": \"2021-01-01T04:06:23.000Z\",\r",
																	"            \"driver\": {\r",
																	"                \"seats\": 4,\r",
																	"                \"service\": 1\r",
																	"            }\r",
																	"        }\r",
																	"    ]);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"get_appointment_link\", \"test-getappointment-enrollments-driver-link\")"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{get_appointment_link}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "files",
									"item": [
										{
											"name": "get appointment by link - success - files",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.files).to.eql([\r",
															"        {\r",
															"            \"name\": \"testfile-1.pdf\",\r",
															"            \"url\": \"localhost:3000/files/2e57b350-78fa-472b-b42f-b1de84dac157\",\r",
															"            \"id\": \"2e57b350-78fa-472b-b42f-b1de84dac157\"\r",
															"        },\r",
															"        {\r",
															"            \"name\": \"testfile-2.pdf\",\r",
															"            \"url\": \"localhost:3000/files/eea571f9-e374-46ad-bda4-4b9191db5961\",\r",
															"            \"id\": \"eea571f9-e374-46ad-bda4-4b9191db5961\"\r",
															"        },\r",
															"        {\r",
															"            \"name\": \"testfile-3.pdf\",\r",
															"            \"url\": \"localhost:3000/files/3b3fee67-51ae-4fa8-a303-7251bd28d7ce\",\r",
															"            \"id\": \"3b3fee67-51ae-4fa8-a303-7251bd28d7ce\"\r",
															"        }\r",
															"    ]);\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"get_appointment_link\", \"test-getappointment-files-link\")"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{get_appointment_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{get_appointment_link}}"
													]
												}
											},
											"response": []
										}
									]
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_getappointment}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_getappointment\");",
											"const password = pm.environment.get(\"keycloak_password_getappointment\");",
											"",
											"const tokenVariableName = 'bearer_getappointment';",
											"const tokenExpriyDateVariableName = 'bearer_getappointment_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "update",
							"item": [
								{
									"name": "main",
									"item": [
										{
											"name": "update appointment - success",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_update_link\", \"test-updateappointment-link\");\r",
															"\r",
															"pm.variables.set(\"appointment_update_title_new\", \"test-POSTMAN-appointmentupdate-title-new-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
															"pm.variables.set(\"appointment_update_description_new\", \"test-POSTMAN-appointmentupdate-description-new-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
															"pm.variables.set(\"appointment_update_location_new\",  \"test-POSTMAN-appointmentupdate-location-new-\" + pm.globals.replaceIn('{{$randomCity}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_appointment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_appointment_update_title\", pm.variables.get('appointment_update_title_new'));\r",
															"pm.collectionVariables.set(\"VALIDATION_appointment_update_description\", pm.variables.get('appointment_update_description_new'));\r",
															"pm.collectionVariables.set(\"VALIDATION_appointment_update_location\", pm.variables.get('appointment_update_location_new'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"{{appointment_update_title_new}}\",\r\n    \"location\": \"{{appointment_update_location_new}}\",\r\n    \"description\": \"{{appointment_update_description_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{appointment_update_link}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VALIDATION - get updated appointment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_update_title\"));\r",
															"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_update_description\"));\r",
															"    pm.expect(jsonData.location).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_update_location\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{VALIDATION_appointment_update_location_header}}",
													"host": [
														"{{VALIDATION_appointment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update appointment - success (as admin)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const username = pm.environment.get(\"keycloak_username_updateappointment-admin\");\r",
															"const password = pm.environment.get(\"keycloak_password_updateappointment-admin\");\r",
															"\r",
															"const tokenVariableName = 'bearer_updateappointment-admin';\r",
															"const tokenExpriyDateVariableName = 'bearer_updateappointment-admin_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);\r",
															"\r",
															"pm.variables.set(\"appointment_update_link\", \"test-updateappointment-link\");\r",
															"\r",
															"pm.variables.set(\"appointment_update_title_new\", \"test-POSTMAN-appointmentupdate-title-new-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
															"pm.variables.set(\"appointment_update_description_new\", \"test-POSTMAN-appointmentupdate-description-new-\" + pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
															"pm.variables.set(\"appointment_update_location_new\",  \"test-POSTMAN-appointmentupdate-location-new-\" + pm.globals.replaceIn('{{$randomCity}}'));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_appointment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_appointment_update_title\", pm.variables.get('appointment_update_title_new'));\r",
															"pm.collectionVariables.set(\"VALIDATION_appointment_update_description\", pm.variables.get('appointment_update_description_new'));\r",
															"pm.collectionVariables.set(\"VALIDATION_appointment_update_location\", pm.variables.get('appointment_update_location_new'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_updateappointment-admin}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"{{appointment_update_title_new}}\",\r\n    \"location\": \"{{appointment_update_location_new}}\",\r\n    \"description\": \"{{appointment_update_description_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{appointment_update_link}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VALIDATION - get updated appointment Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.relations).to.eql([\"ADMIN\"])\r",
															"\r",
															"    pm.expect(jsonData.title).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_update_title\"));\r",
															"    pm.expect(jsonData.description).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_update_description\"));\r",
															"    pm.expect(jsonData.location).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_update_location\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const username = pm.environment.get(\"keycloak_username_updateappointment-admin\");\r",
															"const password = pm.environment.get(\"keycloak_password_updateappointment-admin\");\r",
															"\r",
															"const tokenVariableName = 'bearer_updateappointment-admin';\r",
															"const tokenExpriyDateVariableName = 'bearer_updateappointment-admin_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_updateappointment-admin}}",
															"type": "string"
														}
													]
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{VALIDATION_appointment_update_location_header}}",
													"host": [
														"{{VALIDATION_appointment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update appointment - failure - invalid attribute",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_update_link\", \"test-updateappointment-link\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status Code 422\", function () {\r",
															"    pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"INVALID_ATTRIBUTE\",\r",
															"        \"message\": \"Following attributes are not allowed to be updated\",\r",
															"        \"data\": [\r",
															"            {\r",
															"                \"attribute\": \"INVALID_ATTRIBUTE\",\r",
															"                \"in\": \"body\",\r",
															"                \"value\": \"ANY_VALUE\",\r",
															"                \"message\": \"The specified attribute is not allowed to be modified\"\r",
															"            }\r",
															"        ]\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"INVALID_ATTRIBUTE\": \"ANY_VALUE\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{appointment_update_link}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update appointment - failure - not found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_update_link\", \"INVALID_LINK\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status Code\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
															"        \"message\": \"Missing permissions to execute request\",\r",
															"        \"data\": {\r",
															"            \"attribute\": \"link\",\r",
															"            \"in\": \"path\",\r",
															"            \"value\": pm.variables.get(\"appointment_update_link\"),\r",
															"            \"message\": \"Specified appointment is not in your ownership. You are also not permitted to administrate this appointment.\"\r",
															"        }\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"{{appointment_update_title}}\",\r\n    \"location\": \"{{appointment_update_location}}\",\r\n    \"description\": \"{{appointment_update_description}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{appointment_update_link}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update appointment - failure - missing permissions",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_update_link\", \"test-updateappointment-missingpermissions-link\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
															"        \"message\": \"Missing permissions to execute request\",\r",
															"        \"data\": {\r",
															"            \"attribute\": \"link\",\r",
															"            \"in\": \"path\",\r",
															"            \"value\": pm.variables.get(\"appointment_update_link\"),\r",
															"            \"message\": \"Specified appointment is not in your ownership. You are also not permitted to administrate this appointment.\"\r",
															"        }\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"{{appointment_update_title}}\",\r\n    \"location\": \"{{appointment_update_location}}\",\r\n    \"description\": \"{{appointment_update_description}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{appointment_update_link}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "link",
									"item": [
										{
											"name": "success",
											"item": [
												{
													"name": "PREPARATION - create Appointment - custom link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"\r",
																	"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
																	"var date_unix = Date.parse(date);\r",
																	"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
																	"var deadline_unix = Date.parse(deadline);\r",
																	"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-updateappointment-link-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-updateappointment-link-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-updateappointment-link-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"const schema = {\r",
																	"    \"type\": \"object\",\r",
																	"    \"properties\": {\r",
																	"        \"id\": { \"type\": \"string\"},\r",
																	"        \"link\": { \"type\": \"string\" }\r",
																	"    },\r",
																	"    \"required\": [\"id\", \"link\"],\r",
																	"    \"additionalProperties\": false\r",
																	"};\r",
																	"\r",
																	"pm.test(\"Validate schema\", () => {\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"const jsonData = pm.response.json();\r",
																	"\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_link\", jsonData.link);\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link_original\", jsonData.link);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - success - link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_link_new\", \"test-POSTMAN-appointmentupdate-link-link-new-\" + pm.globals.replaceIn('{{$randomPassword}}'));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(204);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Location header is present\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"});\r",
																	"\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link_header\", pm.response.headers.get(\"Location\"));\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link\", pm.variables.get('appointment_update_link_new'));\r",
																	"\r",
																	"// UPDATE LINK FOR RE-EXECUTION OF THIS TEST\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_link\", pm.variables.get('appointment_update_link_new'));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"link\": \"{{appointment_update_link_new}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{PREPARATION_appointment_update_link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "VALIDATION - get updated appointment - link",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData.link).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_update_link\"));\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{VALIDATION_appointment_update_link_header}}",
															"host": [
																"{{VALIDATION_appointment_update_link_header}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "VALIDATION - get updated appointment - link - by old link",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Failed GET request\", function () {\r",
																	"    pm.response.to.have.status(404);\r",
																	"});\r",
																	"\r",
																	"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
																	"testSchema(pm.response);\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.eql({\r",
																	"        \"code\": \"NOT_FOUND\",\r",
																	"        \"message\": \"Requested resource could not be located\",\r",
																	"        \"data\": {\r",
																	"            \"attribute\": \"link\",\r",
																	"            \"in\": \"path\",\r",
																	"            \"value\": pm.collectionVariables.get(\"VALIDATION_appointment_update_link_original\"),\r",
																	"            \"message\": \"Specified appointment does not exist\"\r",
																	"        }\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{baseUrl}}/appointments/{{VALIDATION_appointment_update_link_original}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{VALIDATION_appointment_update_link_original}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "failure",
											"item": [
												{
													"name": "PREPARATION - create Appointment - custom link",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"\r",
																	"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
																	"var date_unix = Date.parse(date);\r",
																	"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
																	"var deadline_unix = Date.parse(deadline);\r",
																	"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-updateappointment-link-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-updateappointment-link-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-updateappointment-link-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"const schema = {\r",
																	"    \"type\": \"object\",\r",
																	"    \"properties\": {\r",
																	"        \"id\": { \"type\": \"string\"},\r",
																	"        \"link\": { \"type\": \"string\" }\r",
																	"    },\r",
																	"    \"required\": [\"id\", \"link\"],\r",
																	"    \"additionalProperties\": false\r",
																	"};\r",
																	"\r",
																	"pm.test(\"Validate schema\", () => {\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"const jsonData = pm.response.json();\r",
																	"\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_link\", jsonData.link);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - failure - link in use",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_link_new\",  \"test-updateappointment-link-existinglink-link\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Failed POST request\", function () {\r",
																	"    pm.response.to.have.status(409);\r",
																	"});\r",
																	"\r",
																	"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
																	"testSchema(pm.response);\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.eql({\r",
																	"        \"code\": \"DUPLICATE_VALUES\",\r",
																	"        \"message\": \"Provided values are already in use\",\r",
																	"        \"data\": [\r",
																	"            {\r",
																	"                \"attribute\": \"link\",\r",
																	"                \"value\": pm.variables.get(\"appointment_update_link_new\"),\r",
																	"                \"message\": \"Value is already in use by other appointment. Specify a different link\"\r",
																	"            }\r",
																	"        ]\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"link\": \"{{appointment_update_link_new}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{PREPARATION_appointment_update_link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - failure - not found",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_link\",  \"INVALID_LINK\");\r",
																	"\r",
																	"pm.variables.set(\"appointment_update_link_new\", pm.globals.replaceIn(\"{{$randomPassword}}\"));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status Code 403\", function () {\r",
																	"    pm.response.to.have.status(403);\r",
																	"});\r",
																	"\r",
																	"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
																	"testSchema(pm.response);\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.eql({\r",
																	"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
																	"        \"message\": \"Missing permissions to execute request\",\r",
																	"        \"data\": {\r",
																	"            \"attribute\": \"link\",\r",
																	"            \"in\": \"path\",\r",
																	"            \"value\": pm.variables.get(\"appointment_update_link\"),\r",
																	"            \"message\": \"Specified appointment is not in your ownership. You are also not permitted to administrate this appointment.\"\r",
																	"        }\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"link\": \"{{appointment_update_link_new}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{appointment_update_link}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "additions",
									"item": [
										{
											"name": "add",
											"item": [
												{
													"name": "PREPARATION - create Appointment",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"\r",
																	"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
																	"var date_unix = Date.parse(date);\r",
																	"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
																	"var deadline_unix = Date.parse(deadline);\r",
																	"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-updateappointment-additions-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-updateappointment-additions-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"const schema = {\r",
																	"    \"type\": \"object\",\r",
																	"    \"properties\": {\r",
																	"        \"id\": { \"type\": \"string\"},\r",
																	"        \"link\": { \"type\": \"string\" }\r",
																	"    },\r",
																	"    \"required\": [\"id\", \"link\"],\r",
																	"    \"additionalProperties\": false\r",
																	"};\r",
																	"\r",
																	"pm.test(\"Validate schema\", () => {\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"const jsonData = pm.response.json();\r",
																	"\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_link\", jsonData.link);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - success - additions - add",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_addition_new_1_name\",  \"test-POSTMAN-appointmentupdate-additions-addition-1-new-name-\" + pm.globals.replaceIn('{{$randomWord}}'));\r",
																	"pm.variables.set(\"appointment_update_addition_new_2_name\",  \"test-POSTMAN-appointmentupdate-additions-addition-2-new-name-\" + pm.globals.replaceIn('{{$randomWord}}'));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(204);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Location header is present\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"});\r",
																	"\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link_header\", pm.response.headers.get(\"Location\"));\r",
																	"\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_addition_1_name\", pm.variables.get('appointment_update_addition_new_1_name'));\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_addition_2_name\", pm.variables.get('appointment_update_addition_new_2_name'));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"additions\": [{\r\n        \"name\": \"{{appointment_update_addition_new_1_name}}\"\r\n    },{\r\n        \"name\": \"{{appointment_update_addition_new_2_name}}\"\r\n    }]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{PREPARATION_appointment_update_link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "VALIDATION - get updated appointment - additions - add",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData.additions.length).to.eql(2);\r",
																	"\r",
																	"    pm.expect(jsonData.additions[0].name).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_update_addition_1_name\"));\r",
																	"    pm.expect(jsonData.additions[0].order).to.eql(0);\r",
																	"    pm.expect(jsonData.additions[1].name).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_update_addition_2_name\"));\r",
																	"    pm.expect(jsonData.additions[1].order).to.eql(1);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{VALIDATION_appointment_update_link_header}}",
															"host": [
																"{{VALIDATION_appointment_update_link_header}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - failure - additions - add - duplicates",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_addition_new_1_name\",  \"test-POSTMAN-appointmentupdate-additions-addition-1-new-name-\" + pm.globals.replaceIn('{{$randomWord}}'));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Failed GET request\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
																	"testSchema(pm.response);\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.eql({\r",
																	"        \"code\": \"DUPLICATE_ENTRY\",\r",
																	"        \"message\": \"Following values are duplicates and can not be used\",\r",
																	"        \"data\": [\r",
																	"            {\r",
																	"                \"object\": \"addition\",\r",
																	"                \"attribute\": \"name\",\r",
																	"                \"value\": pm.variables.get(\"appointment_update_addition_new_1_name\"),\r",
																	"                \"in\": \"body\"\r",
																	"            }\r",
																	"        ]\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"additions\": [{\r\n        \"name\": \"{{appointment_update_addition_new_1_name}}\"\r\n    },{\r\n        \"name\": \"{{appointment_update_addition_new_1_name}}\"\r\n    }]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{PREPARATION_appointment_update_link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - failure - additions - add - no name provided",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_addition_new_1_name\",  \"test-POSTMAN-appointmentupdate-additions-addition-1-new-name-\" + pm.globals.replaceIn('{{$randomWord}}'));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Failed GET request\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
																	"testSchema(pm.response);\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.eql({\r",
																	"        \"code\": \"MISSING_VALUES\",\r",
																	"        \"message\": \"Please specify the following values\",\r",
																	"        \"data\": [\r",
																	"            {\r",
																	"                \"object\": \"addition\",\r",
																	"                \"in\": \"body\",\r",
																	"                \"attribute\": \"name\",\r",
																	"                \"message\": \"Object has no attribute 'name'. Either provide a valid id to refer to a Addition, or provide a name for Addition creation.\"\r",
																	"            }\r",
																	"        ]\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"additions\": [{\r\n        \"name\": \"{{appointment_update_addition_new_1_name}}\"\r\n    },{\r\n       \"any\": \"attribute\"\r\n    }]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{PREPARATION_appointment_update_link}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "remove",
											"item": [
												{
													"name": "PREPARATION - create Appointment - additions",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"\r",
																	"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
																	"var date_unix = Date.parse(date);\r",
																	"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
																	"var deadline_unix = Date.parse(deadline);\r",
																	"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-updateappointment-additions-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-updateappointment-additions-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);\r",
																	"\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_addition_1_name\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-addition-1-name\");\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_addition_2_name\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-addition-2-name\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"const schema = {\r",
																	"    \"type\": \"object\",\r",
																	"    \"properties\": {\r",
																	"        \"id\": { \"type\": \"string\"},\r",
																	"        \"link\": { \"type\": \"string\" }\r",
																	"    },\r",
																	"    \"required\": [\"id\", \"link\"],\r",
																	"    \"additionalProperties\": false\r",
																	"};\r",
																	"\r",
																	"pm.test(\"Validate schema\", () => {\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Location header is present\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
																	"});\r",
																	"\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_link\", jsonData.link);\r",
																	"\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_1\", pm.variables.get('PREPARATION_appointment_creation_addition_1_name'));\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_2\", pm.variables.get('PREPARATION_appointment_creation_addition_2_name'));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\",\r\n    \"additions\": [{\r\n        \"name\": \"{{PREPARATION_appointment_creation_addition_1_name}}\"\r\n    },{\r\n        \"name\": \"{{PREPARATION_appointment_creation_addition_2_name}}\"\r\n    }]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - success - additions - remove",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	""
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(204);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Location header is present\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"});\r",
																	"\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link_header\", pm.response.headers.get(\"Location\"));\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link\", pm.collectionVariables.get('PREPARATION_appointment_update_link'));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"additions\": []\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{PREPARATION_appointment_update_link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "VALIDATION - get updated appointment - additions - remove",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.not.have.property(\"additions\");\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{VALIDATION_appointment_update_link_header}}",
															"host": [
																"{{VALIDATION_appointment_update_link_header}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "change order (keep current enrollment additions)",
											"item": [
												{
													"name": "PREPARATION - create Appointment - success - change order",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"\r",
																	"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
																	"var date_unix = Date.parse(date);\r",
																	"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
																	"var deadline_unix = Date.parse(deadline);\r",
																	"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
																	"\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-updateappointment-additions-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-updateappointment-additions-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);\r",
																	"\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_addition_1_name\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-addition-1-name\");\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_addition_2_name\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-addition-2-name\");\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_addition_3_name\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-addition-3-name\");\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_addition_4_name\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-addition-4-name\");\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_addition_5_name\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-addition-5-name\");\r",
																	"pm.variables.set(\"PREPARATION_appointment_creation_addition_6_name\",  \"test-POSTMAN-PREPARATION-updateappointment-additions-addition-6-name\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Successful POST request\", function () {\r",
																	"    pm.response.to.have.status(201);\r",
																	"});\r",
																	"\r",
																	"const schema = {\r",
																	"    \"type\": \"object\",\r",
																	"    \"properties\": {\r",
																	"        \"id\": { \"type\": \"string\"},\r",
																	"        \"link\": { \"type\": \"string\" }\r",
																	"    },\r",
																	"    \"required\": [\"id\", \"link\"],\r",
																	"    \"additionalProperties\": false\r",
																	"};\r",
																	"\r",
																	"pm.test(\"validate schema\", () => {\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"var jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Location header is present\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/appointments/\" + jsonData.link);\r",
																	"});\r",
																	"\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
																	"\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_id\", jsonData.id);\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_link\", jsonData.link);\r",
																	"\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_1_name\", pm.variables.get('PREPARATION_appointment_creation_addition_1_name'));\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_2_name\", pm.variables.get('PREPARATION_appointment_creation_addition_2_name'));\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_3_name\", pm.variables.get('PREPARATION_appointment_creation_addition_3_name'));\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_4_name\", pm.variables.get('PREPARATION_appointment_creation_addition_4_name'));\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_5_name\", pm.variables.get('PREPARATION_appointment_creation_addition_5_name'));\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_6_name\", pm.variables.get('PREPARATION_appointment_creation_addition_6_name'));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "POST",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\",\r\n    \"additions\": [{\r\n        \"name\": \"{{PREPARATION_appointment_creation_addition_1_name}}\"\r\n    },{\r\n        \"name\": \"{{PREPARATION_appointment_creation_addition_2_name}}\"\r\n    },{\r\n        \"name\": \"{{PREPARATION_appointment_creation_addition_3_name}}\"\r\n    },{\r\n        \"name\": \"{{PREPARATION_appointment_creation_addition_4_name}}\"\r\n    },{\r\n        \"name\": \"{{PREPARATION_appointment_creation_addition_5_name}}\"\r\n    },{\r\n        \"name\": \"{{PREPARATION_appointment_creation_addition_6_name}}\"\r\n    }]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments"
															]
														}
													},
													"response": []
												},
												{
													"name": "PREPRATION - get created appointment- change order (for IDs)",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"const jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    pm.expect(jsonData.additions.length).to.eql(6);\r",
																	"\r",
																	"    pm.expect(jsonData.additions[0].name).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_1_name\"));\r",
																	"    pm.expect(jsonData.additions[0].order).to.eql(0);\r",
																	"    pm.expect(jsonData.additions[1].name).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_2_name\"));\r",
																	"    pm.expect(jsonData.additions[1].order).to.eql(1);\r",
																	"    pm.expect(jsonData.additions[2].name).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_3_name\"));\r",
																	"    pm.expect(jsonData.additions[2].order).to.eql(2);\r",
																	"    pm.expect(jsonData.additions[3].name).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_4_name\"));\r",
																	"    pm.expect(jsonData.additions[3].order).to.eql(3);\r",
																	"    pm.expect(jsonData.additions[4].name).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_5_name\"));\r",
																	"    pm.expect(jsonData.additions[4].order).to.eql(4);\r",
																	"    pm.expect(jsonData.additions[5].name).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_6_name\"));\r",
																	"    pm.expect(jsonData.additions[5].order).to.eql(5);\r",
																	"});\r",
																	"\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_1_id\", jsonData.additions[0].id);\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_2_id\", jsonData.additions[1].id);\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_3_id\", jsonData.additions[2].id);\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_4_id\", jsonData.additions[3].id);\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_5_id\", jsonData.additions[4].id);\r",
																	"pm.collectionVariables.set(\"PREPARATION_appointment_update_addition_6_id\", jsonData.additions[5].id);"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{PREPARATION_appointment_update_location_header}}",
															"host": [
																"{{PREPARATION_appointment_update_location_header}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - success - additions - change order",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"\r",
																	"pm.variables.set(\"appointment_update_addition_1_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_1_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_2_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_2_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_3_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_3_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_4_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_4_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_5_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_5_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_6_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_6_id'));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(204);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Location header is present\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"});\r",
																	"\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link_header\", pm.response.headers.get(\"Location\"));\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link\", pm.collectionVariables.get('prep_updateappointment_link'));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"additions\": [{\r\n        \"id\": \"{{appointment_update_addition_1_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_2_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_4_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_6_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_5_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_3_id}}\"\r\n    }]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{PREPARATION_appointment_update_link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "VALIDATION - get created appointment - change order",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"const jsonData = pm.response.json();\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    pm.expect(jsonData.additions.length).to.eql(6);\r",
																	"\r",
																	"    pm.expect(jsonData.additions[0].id).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_1_id\"));\r",
																	"    pm.expect(jsonData.additions[0].order).to.eql(0);\r",
																	"    pm.expect(jsonData.additions[1].id).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_2_id\"));\r",
																	"    pm.expect(jsonData.additions[1].order).to.eql(1);\r",
																	"    pm.expect(jsonData.additions[2].id).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_4_id\"));\r",
																	"    pm.expect(jsonData.additions[2].order).to.eql(2);\r",
																	"    pm.expect(jsonData.additions[3].id).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_6_id\"));\r",
																	"    pm.expect(jsonData.additions[3].order).to.eql(3);\r",
																	"    pm.expect(jsonData.additions[4].id).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_5_id\"));\r",
																	"    pm.expect(jsonData.additions[4].order).to.eql(4);\r",
																	"    pm.expect(jsonData.additions[5].id).to.eql(pm.collectionVariables.get(\"PREPARATION_appointment_update_addition_3_id\"));\r",
																	"    pm.expect(jsonData.additions[5].order).to.eql(5);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{VALIDATION_appointment_update_link_header}}",
															"host": [
																"{{VALIDATION_appointment_update_link_header}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - failure - additions - change order - no name provided",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_addition_1_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_1_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_2_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_2_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_3_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_3_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_4_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_4_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_5_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_5_id'));\r",
																	"pm.variables.set(\"appointment_update_addition_6_id\", pm.collectionVariables.get('PREPARATION_appointment_update_addition_6_id'));"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Failed GET request\", function () {\r",
																	"    pm.response.to.have.status(400);\r",
																	"});\r",
																	"\r",
																	"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
																	"testSchema(pm.response);\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.eql({\r",
																	"        \"code\": \"MISSING_VALUES\",\r",
																	"        \"message\": \"Please specify the following values\",\r",
																	"        \"data\": [\r",
																	"            {\r",
																	"                \"object\": \"addition\",\r",
																	"                \"in\": \"body\",\r",
																	"                \"attribute\": \"name\",\r",
																	"                \"message\": \"Object has no attribute 'name'. Either provide a valid id to refer to a Addition, or provide a name for Addition creation.\"\r",
																	"            }\r",
																	"        ]\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"additions\": [{\r\n        \"id\": \"{{appointment_update_addition_1_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_2_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_4_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_6_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_5_id}}\"\r\n    }, {\r\n        \"id\": \"{{appointment_update_addition_3_id}}\"\r\n    }, {\r\n        \"any\": \"attribute\"\r\n    }]\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{PREPARATION_appointment_update_link}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "__rename",
											"item": []
										},
										{
											"name": "__mix_adding_existing_addition_not_adding_name_twice",
											"item": []
										}
									]
								},
								{
									"name": "dates",
									"item": [
										{
											"name": "date",
											"item": [
												{
													"name": "update appointment - success - date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_link\", \"test-updateappointment-date-link\");\r",
																	"\r",
																	"pm.variables.set(\"appointment_update_date_new\", \"2021-05-01 10:05:23\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(204);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Location header is present\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"});\r",
																	"\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link_header\", pm.response.headers.get(\"Location\"));\r",
																	"\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_date\", pm.variables.get(\"appointment_update_date_new\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"date\": \"{{appointment_update_date_new}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{appointment_update_link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "VALIDATION - get updated appointment - date",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    var date_unix_orig = Date.parse(jsonData.date);\r",
																	"    var date_final_orig = moment(date_unix_orig).format(\"YYYY-MM-DDThh:mm:ss.sZ\");\r",
																	"\r",
																	"    var date_unix = Date.parse(pm.collectionVariables.get(\"VALIDATION_appointment_update_date\"));\r",
																	"    var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mm:ss.sZ\");\r",
																	"\r",
																	"    pm.expect(date_final_orig).to.eql(date_final);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{VALIDATION_appointment_update_link_header}}",
															"host": [
																"{{VALIDATION_appointment_update_link_header}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - failure - date - date < deadline",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_link\", \"test-updateappointment-date-link\");\r",
																	"\r",
																	"pm.variables.set(\"appointment_update_date_new\", \"2000-01-01 20:05:23\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Failed PUT request\", function () {\r",
																	"    pm.response.to.have.status(422);\r",
																	"});\r",
																	"\r",
																	"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
																	"testSchema(pm.response);\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.eql({\r",
																	"        \"code\": \"INVALID_VALUES\",\r",
																	"        \"message\": \"Given values can not be processed\",\r",
																	"        \"data\": [\r",
																	"            {\r",
																	"                \"attribute\": \"date\",\r",
																	"                \"value\": pm.variables.get(\"appointment_update_date_new\"),\r",
																	"                \"message\": \"The specified date is timed before the deadline\"\r",
																	"            }\r",
																	"        ]\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"date\": \"{{appointment_update_date_new}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{appointment_update_link}}"
															]
														}
													},
													"response": []
												}
											]
										},
										{
											"name": "deadline",
											"item": [
												{
													"name": "update appointment - success - deadline",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_link\", \"test-updateappointment-date-link\");\r",
																	"\r",
																	"pm.variables.set(\"appointment_update_deadline_new\", \"2020-12-30 10:05:23\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Status code is 204\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(204);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Location header is present\", function () {\r",
																	"    pm.response.to.have.header(\"Location\");\r",
																	"});\r",
																	"\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_link_header\", pm.response.headers.get(\"Location\"));\r",
																	"\r",
																	"pm.collectionVariables.set(\"VALIDATION_appointment_update_deadline\", pm.variables.get(\"appointment_update_deadline_new\"));"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"deadline\": \"{{appointment_update_deadline_new}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{appointment_update_link}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "VALIDATION - get updated appointment - date",
													"event": [
														{
															"listen": "test",
															"script": {
																"exec": [
																	"const moment = require('moment');\r",
																	"\r",
																	"pm.test(\"Status code is 200\", function () {\r",
																	"    pm.expect(pm.response.code).to.equal(200);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Valid schema\", () => {\r",
																	"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
																	"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
																	"\r",
																	"    pm.response.to.have.jsonSchema(schema);\r",
																	"});\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    const jsonData = pm.response.json();\r",
																	"\r",
																	"    var deadline_unix_orig = Date.parse(jsonData.deadline);\r",
																	"    var deadline_final_orig = moment(deadline_unix_orig).format(\"YYYY-MM-DDThh:mm:ss.sZ\");\r",
																	"\r",
																	"    var deadline_unix = Date.parse(pm.collectionVariables.get(\"VALIDATION_appointment_update_deadline\"));\r",
																	"    var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mm:ss.sZ\");\r",
																	"\r",
																	"    pm.expect(deadline_final_orig).to.eql(deadline_final);\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "GET",
														"header": [],
														"url": {
															"raw": "{{VALIDATION_appointment_update_link_header}}",
															"host": [
																"{{VALIDATION_appointment_update_link_header}}"
															]
														}
													},
													"response": []
												},
												{
													"name": "update appointment - failure - date - deadline < date",
													"event": [
														{
															"listen": "prerequest",
															"script": {
																"exec": [
																	"pm.variables.set(\"appointment_update_link\", \"test-updateappointment-date-link\");\r",
																	"\r",
																	"pm.variables.set(\"appointment_update_deadline_new\", \"2040-01-01 20:05:23\");"
																],
																"type": "text/javascript"
															}
														},
														{
															"listen": "test",
															"script": {
																"exec": [
																	"pm.test(\"Failed PUT request\", function () {\r",
																	"    pm.response.to.have.status(422);\r",
																	"});\r",
																	"\r",
																	"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
																	"testSchema(pm.response);\r",
																	"\r",
																	"pm.test(\"Correct JSON response data\", function () {\r",
																	"    var jsonData = pm.response.json();\r",
																	"\r",
																	"    pm.expect(jsonData).to.eql({\r",
																	"        \"code\": \"INVALID_VALUES\",\r",
																	"        \"message\": \"Given values can not be processed\",\r",
																	"        \"data\": [\r",
																	"            {\r",
																	"                \"attribute\": \"deadline\",\r",
																	"                \"value\": pm.variables.get(\"appointment_update_deadline_new\"),\r",
																	"                \"message\": \"The specified deadline is timed after the date\"\r",
																	"            }\r",
																	"        ]\r",
																	"    });\r",
																	"});"
																],
																"type": "text/javascript"
															}
														}
													],
													"request": {
														"method": "PUT",
														"header": [],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"deadline\": \"{{appointment_update_deadline_new}}\"\r\n}",
															"options": {
																"raw": {
																	"language": "json"
																}
															}
														},
														"url": {
															"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
															"host": [
																"{{baseUrl}}"
															],
															"path": [
																"appointments",
																"{{appointment_update_link}}"
															]
														}
													},
													"response": []
												}
											]
										}
									]
								},
								{
									"name": "hidden",
									"item": [
										{
											"name": "RESET - update appointment - success - hidden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_update_link\",  \"test-updateappointment-hidden-link\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"RESET_appointment_update_link_header\", pm.response.headers.get(\"Location\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"hidden\": false\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{appointment_update_link}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "RESET VALIDATION - get updated appointment - hidden",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.enrollments.length).to.eql(3);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{RESET_appointment_update_link_header}}",
													"host": [
														"{{RESET_appointment_update_link_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update appointment - success - hidden",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_update_link\",  \"test-updateappointment-hidden-link\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_appointment_update_link_header\", pm.response.headers.get(\"Location\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"hidden\": true\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{RESET_appointment_update_link_header}}",
													"host": [
														"{{RESET_appointment_update_link_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VALIDATION - get updated appointment - hidden (no enrollments returned)",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.hidden).to.eql(true);\r",
															"    pm.expect(jsonData).to.not.have.property(\"enrollments\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{VALIDATION_appointment_update_link_header}}",
													"host": [
														"{{VALIDATION_appointment_update_link_header}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "PROTECTION CHECK - update",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_update_link\", \"ANY_LINK\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"statusCode\": 401,\r",
													"        \"message\": \"Missing or invalid Authorization header\",\r",
													"        \"error\": \"Unauthorized\"\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": []
										},
										"url": {
											"raw": "{{baseUrl}}/appointments/{{appointment_update_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{appointment_update_link}}"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_updateappointment}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_updateappointment\");",
											"const password = pm.environment.get(\"keycloak_password_updateappointment\");",
											"",
											"const tokenVariableName = 'bearer_updateappointment';",
											"const tokenExpriyDateVariableName = 'bearer_updateappointment_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "management-relation",
							"item": [
								{
									"name": "PROTECTION CHECK - appointment - managementrelations",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_managementrelations_link\", \"ANY_LINK\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"statusCode\": 401,\r",
													"        \"message\": \"Missing or invalid Authorization header\",\r",
													"        \"error\": \"Unauthorized\"\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{appointment_managementrelations_link}}/management-relations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{appointment_managementrelations_link}}",
												"management-relations"
											]
										}
									},
									"response": []
								},
								{
									"name": "appointment - managementrelations - success - as appointment creator",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const username = pm.environment.get(\"keycloak_username_appointment_managementrelations\");\r",
													"const password = pm.environment.get(\"keycloak_password_appointment_managementrelations\");\r",
													"\r",
													"const tokenVariableName = 'bearer_appointment_managementrelations';\r",
													"const tokenExpriyDateVariableName = 'bearer_appointment_managementrelations_expiry_date';\r",
													"\r",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);\r",
													"\r",
													"pm.variables.set(\"appointment_managementrelations_link\", \"test-appointment-managementrelations-link\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    pm.expect(pm.response.json()). to.eql([\r",
													"        \"CREATOR\"\r",
													"    ])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearer_appointment_managementrelations}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{appointment_managementrelations_link}}/management-relations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{appointment_managementrelations_link}}",
												"management-relations"
											]
										}
									},
									"response": []
								},
								{
									"name": "appointment - managementrelations - success - as appointment admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const username = pm.environment.get(\"keycloak_username_appointment_managementrelations-admin\");\r",
													"const password = pm.environment.get(\"keycloak_password_appointment_managementrelations-admin\");\r",
													"\r",
													"const tokenVariableName = 'bearer_appointment_managementrelations-admin';\r",
													"const tokenExpriyDateVariableName = 'bearer_appointment_managementrelations-admin_expiry_date';\r",
													"\r",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);\r",
													"\r",
													"pm.variables.set(\"appointment_managementrelations_link\", \"test-appointment-managementrelations-link\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    pm.expect(pm.response.json()). to.eql([\r",
													"        \"ADMIN\"\r",
													"    ])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearer_appointment_managementrelations-admin}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{appointment_managementrelations_link}}/management-relations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{appointment_managementrelations_link}}",
												"management-relations"
											]
										}
									},
									"response": []
								},
								{
									"name": "appointment - managementrelations - success - no relation",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const username = pm.environment.get(\"keycloak_username_appointment_managementrelations-regularuser\");\r",
													"const password = pm.environment.get(\"keycloak_password_appointment_managementrelations-regularuser\");\r",
													"\r",
													"const tokenVariableName = 'bearer_appointment_managementrelations-regularuser';\r",
													"const tokenExpriyDateVariableName = 'bearer_appointment_managementrelations-regularuser_expiry_date';\r",
													"\r",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);\r",
													"\r",
													"pm.variables.set(\"appointment_managementrelations_link\", \"test-appointment-managementrelations-link\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    pm.expect(pm.response.json()). to.eql([])\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearer_appointment_managementrelations-regularuser}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{appointment_managementrelations_link}}/management-relations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{appointment_managementrelations_link}}",
												"management-relations"
											]
										}
									},
									"response": []
								},
								{
									"name": "appointment - managementrelations - failure - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const username = pm.environment.get(\"keycloak_username_appointment_managementrelations\");\r",
													"const password = pm.environment.get(\"keycloak_password_appointment_managementrelations\");\r",
													"\r",
													"const tokenVariableName = 'bearer_appointment_managementrelations';\r",
													"const tokenExpriyDateVariableName = 'bearer_appointment_managementrelations_expiry_date';\r",
													"\r",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);\r",
													"\r",
													"pm.variables.set(\"appointment_managementrelations_link\", \"ANY_LINK\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Failed GET request\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"link\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"appointment_managementrelations_link\"),\r",
													"            \"message\": \"Specified appointment does not exist\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearer_appointment_managementrelations}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{appointment_managementrelations_link}}/management-relations",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{appointment_managementrelations_link}}",
												"management-relations"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "files",
					"item": [
						{
							"name": "add",
							"item": [
								{
									"name": "single file",
									"item": [
										{
											"name": "PREPARATION - create Appointment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
															"var date_unix = Date.parse(date);\r",
															"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
															"\r",
															"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
															"var deadline_unix = Date.parse(deadline);\r",
															"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
															"\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-managefiles-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-managefiles-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-managefiles-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"string\"},\r",
															"        \"link\": { \"type\": \"string\" }\r",
															"    },\r",
															"    \"required\": [\"id\", \"link\"],\r",
															"    \"additionalProperties\": false\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"PREPARATION_appointment_files_link\", jsonData.link);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/appointments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments"
													]
												}
											},
											"response": []
										},
										{
											"name": "PREPARATION - manage Administrators - add",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-managefiles-admin-user\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_files_link}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/administrators",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"administrators"
													]
												}
											},
											"response": []
										},
										{
											"name": "manage Files - success - add",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "files",
															"type": "file",
															"src": "testfile.pdf"
														},
														{
															"key": "appointment",
															"value": "{{PREPARATION_appointment_files_link}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"files"
													]
												}
											},
											"response": []
										},
										{
											"name": "VALIDATION - get manipulated appointment - manage Files - add - get appointment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.files[0].name).to.eql(\"testfile.pdf\");\r",
															"    pm.expect(jsonData.files[0].url).to.eql(pm.environment.get(\"baseUrl\") + \"/files/\" + jsonData.files[0].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_files_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{PREPARATION_appointment_files_link}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "two files",
									"item": [
										{
											"name": "PREPARATION - create Appointment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
															"var date_unix = Date.parse(date);\r",
															"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
															"\r",
															"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
															"var deadline_unix = Date.parse(deadline);\r",
															"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
															"\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-managefiles-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-managefiles-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-managefiles-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"string\"},\r",
															"        \"link\": { \"type\": \"string\" }\r",
															"    },\r",
															"    \"required\": [\"id\", \"link\"],\r",
															"    \"additionalProperties\": false\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"PREPARATION_appointment_files_link\", jsonData.link);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/appointments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments"
													]
												}
											},
											"response": []
										},
										{
											"name": "PREPARATION - manage Administrators - add",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-managefiles-admin-user\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_files_link}}\"\r\n    }\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/administrators",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"administrators"
													]
												}
											},
											"response": []
										},
										{
											"name": "manage Files - success - add",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "files",
															"type": "file",
															"src": [
																"testfile.pdf",
																"testfile.txt"
															]
														},
														{
															"key": "appointment",
															"value": "{{PREPARATION_appointment_files_link}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"files"
													]
												}
											},
											"response": []
										},
										{
											"name": "VALIDATION - get manipulated appointment - manage Files - add - get appointment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.files[0].name).to.eql(\"testfile.pdf\");\r",
															"    pm.expect(jsonData.files[0].url).to.eql(pm.environment.get(\"baseUrl\") + \"/files/\" + jsonData.files[0].id);\r",
															"    pm.expect(jsonData.files[1].name).to.eql(\"testfile.txt\");\r",
															"    pm.expect(jsonData.files[1].url).to.eql(pm.environment.get(\"baseUrl\") + \"/files/\" + jsonData.files[1].id);\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_files_link}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments",
														"{{PREPARATION_appointment_files_link}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "manage Files - failure - add - no permission (as admin)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-managefiles-admin-user\")\r",
															"\r",
															"const username = pm.environment.get(\"keycloak_username_managefiles-admin\");\r",
															"const password = pm.environment.get(\"keycloak_password_managefiles-admin\");\r",
															"\r",
															"const tokenVariableName = 'bearer_managefiles-admin';\r",
															"const tokenExpriyDateVariableName = 'bearer_managefiles-admin_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status Code 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
															"        \"message\": \"Missing permissions to execute request\",\r",
															"        \"data\": {\r",
															"            \"attribute\": \"link\",\r",
															"            \"in\": \"path\",\r",
															"            \"value\": pm.collectionVariables.get(\"PREPARATION_appointment_files_link\"),\r",
															"            \"message\": \"Specified appointment is not in your ownership. You are not allowed to manage files as administrator.\"\r",
															"        }\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_managefiles-admin}}",
															"type": "string"
														}
													]
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "files",
															"type": "file",
															"src": [
																"testfile.pdf",
																"testfile.txt"
															]
														},
														{
															"key": "appointment",
															"value": "{{PREPARATION_appointment_files_link}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"files"
													]
												}
											},
											"response": []
										},
										{
											"name": "manage Files - failure - add - not found (appointment)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"appointment_files_link\", \"INVALID_LINK\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status Code 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"NOT_FOUND\",\r",
															"        \"message\": \"Requested resource could not be located\",\r",
															"        \"data\": {\r",
															"            \"attribute\": \"link\",\r",
															"            \"in\": \"path\",\r",
															"            \"value\": pm.variables.get(\"appointment_files_link\"),\r",
															"            \"message\": \"Specified appointment does not exist\"\r",
															"        }\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "formdata",
													"formdata": [
														{
															"key": "files",
															"type": "file",
															"src": [
																"testfile.pdf",
																"testfile.txt"
															]
														},
														{
															"key": "appointment",
															"value": "{{appointment_files_link}}",
															"type": "text"
														}
													]
												},
												"url": {
													"raw": "{{baseUrl}}/files",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"files"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "remove",
							"item": [
								{
									"name": "PREPARATION - create Appointment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-managefiles-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-managefiles-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-managefiles-location-\" + pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.collectionVariables.set(\"PREPARATION_appointment_files_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "PREPARATION - manage Adminsitrators  - add",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-managefiles-admin-user\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_files_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/administrators",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators"
											]
										}
									},
									"response": []
								},
								{
									"name": "PREPARATION - manage Files - success - add",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "files",
													"type": "file",
													"src": [
														"testfile.pdf",
														"testfile.txt"
													]
												},
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_files_link}}",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/files",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files"
											]
										}
									},
									"response": []
								},
								{
									"name": "PREPARATION - get manipulated appointment - manage Files - add - get appointment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.collectionVariables.set(\"PREPARATION_file_creation_id_1\", jsonData.files[0].id);\r",
													"pm.collectionVariables.set(\"PREPARATION_file_creation_id_2\", jsonData.files[1].id);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_files_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{PREPARATION_appointment_files_link}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Files - success - remove",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/{{PREPARATION_file_creation_id_1}}?appointment={{PREPARATION_appointment_files_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												"{{PREPARATION_file_creation_id_1}}"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_files_link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get manipulated appointment - manage Files - remove - get appointment",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.files).lengthOf(1);\r",
													"\r",
													"    pm.expect(jsonData.files[0].id).to.eql(pm.collectionVariables.get(\"PREPARATION_file_creation_id_2\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_files_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{PREPARATION_appointment_files_link}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Files - failure - no permission (as admin)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Satus Code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
													"        \"message\": \"Missing permissions to execute request\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"appointment\",\r",
													"            \"in\": \"query\",\r",
													"            \"value\": pm.variables.get(\"PREPARATION_appointment_files_link\"),\r",
													"            \"message\": \"Specified appointment is not in your ownership. You are not allowed to manage files as administrator.\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"file_id\", \"ANY_ID\");\r",
													"\r",
													"const username = pm.environment.get(\"keycloak_username_managefiles-admin\");\r",
													"const password = pm.environment.get(\"keycloak_password_managefiles-admin\");\r",
													"\r",
													"const tokenVariableName = 'bearer_managefiles-admin';\r",
													"const tokenExpriyDateVariableName = 'bearer_managefiles-admin_expiry_date';\r",
													"\r",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearer_managefiles-admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/{{file_id}}?appointment={{PREPARATION_appointment_files_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												"{{file_id}}"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_files_link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Files - failure - not Found (file)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Satus Code 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"id\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"file_id\"),\r",
													"            \"message\": \"Specified file does not exist\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"file_id\", \"INVALID_ID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/{{file_id}}?appointment={{PREPARATION_appointment_files_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												"{{file_id}}"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_files_link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Files - failure - not Found (appointment)",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Satus Code 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"appointment\",\r",
													"            \"in\": \"query\",\r",
													"            \"value\": pm.variables.get(\"appointment_files_link\"),\r",
													"            \"message\": \"Specified appointment does not exist\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_files_link\", \"INVALID_LINK\");\r",
													"pm.variables.set(\"file_id\", \"ANY_ID\");"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/files/{{file_id}}?appointment={{appointment_files_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"files",
												"{{file_id}}"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{appointment_files_link}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PROTECTION CHECK - manage Files - add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"statusCode\": 401,\r",
											"        \"message\": \"Missing or invalid Authorization header\",\r",
											"        \"error\": \"Unauthorized\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/files",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files"
									]
								}
							},
							"response": []
						},
						{
							"name": "PROTECTION CHECK - manage Files - remove",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"file_id\", \"ANY_ID\");"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"statusCode\": 401,\r",
											"        \"message\": \"Missing or invalid Authorization header\",\r",
											"        \"error\": \"Unauthorized\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": []
								},
								"url": {
									"raw": "{{baseUrl}}/files/{{file_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"files",
										"{{file_id}}"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{bearer_managefiles}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const username = pm.environment.get(\"keycloak_username_managefiles\");",
									"const password = pm.environment.get(\"keycloak_password_managefiles\");",
									"",
									"const tokenVariableName = 'bearer_managefiles';",
									"const tokenExpriyDateVariableName = 'bearer_managefiles_expiry_date';",
									"",
									"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
									"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "administrators",
					"item": [
						{
							"name": "add",
							"item": [
								{
									"name": "PREPARATION - create Appointment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-manageadministrators-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-manageadministrators-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-manageadministrators-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.collectionVariables.set(\"PREPARATION_appointment_administrators_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Administrators - add",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-manageadministrators-admin-user\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_adminsitrators_administrator_username\", pm.variables.get(\"appointment_administrators_admin_username\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_administrators_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/administrators",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get manipulated appointment - manage Administrators - add",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.administrators[0].username).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_adminsitrators_administrator_username\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_administrators_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{PREPARATION_appointment_administrators_link}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Administrators - success - add - already admin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_link\", \"test-manageadministrators-existingadmin-link\")\r",
													"\r",
													"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-manageadministrators-admin-user\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_adminsitrators_administrator_username\", pm.variables.get(\"appointment_administrators_admin_username\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_administrators_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/administrators",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get manipulated appointment - manage Administrators - add Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.administrators[0].username).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_adminsitrators_administrator_username\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_administrators_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{PREPARATION_appointment_administrators_link}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Administrators - failure - add - no permissions (as admin)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-manageadministrators-admin-user\")\r",
													"\r",
													"const username = pm.environment.get(\"keycloak_username_manageadministrators-admin\");\r",
													"const password = pm.environment.get(\"keycloak_password_manageadministrators-admin\");\r",
													"\r",
													"const tokenVariableName = 'bearer_manageadministrators-admin';\r",
													"const tokenExpriyDateVariableName = 'bearer_manageadministrators-admin_expiry_date';\r",
													"\r",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
													"        \"message\": \"Missing permissions to execute request\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"link\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.collectionVariables.get(\"PREPARATION_appointment_administrators_link\"),\r",
													"            \"message\": \"Specified appointment is not in your ownership. You are not allowed to manage administrators as administrator.\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearer_manageadministrators-admin}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_administrators_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/administrators",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators"
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Administrators - failure - add - not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"INVALID_USERNAME\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"username\",\r",
													"            \"in\": \"body\",\r",
													"            \"value\": pm.variables.get(\"appointment_administrators_admin_username\"),\r",
													"            \"message\": \"Specified user does not exist\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_administrators_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/administrators",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators"
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Administrators - failure - add - not found (appointment)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_link\", \"INVALID_LINK\")\r",
													"\r",
													"pm.variables.set(\"appointment_administrators_admin_username\", \"INVALID_USERNAME\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"object\": \"appointment\",\r",
													"            \"attribute\": \"link\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"appointment_administrators_admin_username\"),\r",
													"            \"message\": \"Specified appointment does not exist\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{appointment_administrators_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/administrators",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "remove",
							"item": [
								{
									"name": "PREPARATION - create Appointment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-manageadministrators-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-manageadministrators-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-manageadministrators-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.collectionVariables.set(\"PREPARATION_appointment_administrators_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "PREPARATION - add Administrator 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-manageadministrators-admin-user\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_appointment_adminsitrators_administrator_username\", pm.variables.get(\"appointment_administrators_admin_username\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_administrators_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/administrators",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators"
											]
										}
									},
									"response": []
								},
								{
									"name": "PREPARATION - add Administrator 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-manageadministrators-admin-2-user\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_administrators_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/administrators",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators"
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Adminsitrators - success - remove",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-manageadministrators-admin-2-user\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/administrators/{{appointment_administrators_admin_username}}?appointment={{PREPARATION_appointment_administrators_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators",
												"{{appointment_administrators_admin_username}}"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_administrators_link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - get manipulated appointment - manage Administrators - add",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_appointment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.administrators).to.have.lengthOf(1);\r",
													"    pm.expect(jsonData.administrators[0].username).to.eql(pm.collectionVariables.get(\"VALIDATION_appointment_adminsitrators_administrator_username\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/appointments/{{PREPARATION_appointment_administrators_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments",
												"{{PREPARATION_appointment_administrators_link}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Adminsitrators - success - remove - valid user (but not admin)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-manageadministrators-dummy-user\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/administrators/{{appointment_administrators_admin_username}}?appointment={{PREPARATION_appointment_administrators_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators",
												"{{appointment_administrators_admin_username}}"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_administrators_link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Adminsitrators - failure - remove - no permissions (as admin)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"ANY_USERNAME\");\r",
													"\r",
													"const username = pm.environment.get(\"keycloak_username_manageadministrators-admin\");\r",
													"const password = pm.environment.get(\"keycloak_password_manageadministrators-admin\");\r",
													"\r",
													"const tokenVariableName = 'bearer_manageadministrators-admin';\r",
													"const tokenExpriyDateVariableName = 'bearer_manageadministrators-admin_expiry_date';\r",
													"\r",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
													"        \"message\": \"Missing permissions to execute request\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"link\",\r",
													"            \"in\": \"query\",\r",
													"            \"value\": pm.collectionVariables.get(\"PREPARATION_appointment_administrators_link\"),\r",
													"            \"message\": \"Specified appointment is not in your ownership. You are not allowed to manage administrators as administrator.\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{bearer_manageadministrators-admin}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/administrators/{{appointment_administrators_admin_username}}?appointment={{PREPARATION_appointment_administrators_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators",
												"{{appointment_administrators_admin_username}}"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_administrators_link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Adminsitrators - failure - remove - not found (user)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_admin_username\", \"INVALID_USERNAME\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Satus Code 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"username\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"appointment_administrators_admin_username\"),\r",
													"            \"message\": \"Specified user does not exist\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/administrators/{{appointment_administrators_admin_username}}?appointment={{PREPARATION_appointment_administrators_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators",
												"{{appointment_administrators_admin_username}}"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_administrators_link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "manage Adminsitrators - failure - remove - not found (appointment)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"appointment_administrators_link\", \"INVALID_LINK\")\r",
													"\r",
													"pm.variables.set(\"appointment_administrators_admin_username\", \"INVALID_USERNAME\")"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Satus Code 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"link\",\r",
													"            \"in\": \"query\",\r",
													"            \"value\": pm.variables.get(\"appointment_administrators_link\"),\r",
													"            \"message\": \"Specified appointment does not exist\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/administrators/{{appointment_administrators_admin_username}}?appointment={{appointment_administrators_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"administrators",
												"{{appointment_administrators_admin_username}}"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{appointment_administrators_link}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PROTECTION CHECK - manage Administrators - add",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"appointment_administrators_link\", \"ANY_LINK\");\r",
											"\r",
											"pm.variables.set(\"appointment_administrators_admin_username\", \"gjm-test-manageadministrators-admin-user\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"statusCode\": 401,\r",
											"        \"message\": \"Missing or invalid Authorization header\",\r",
											"        \"error\": \"Unauthorized\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{appointment_administrators_link}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/administrators",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"administrators"
									]
								}
							},
							"response": []
						},
						{
							"name": "PROTECTION CHECK - manage Administrators - add Copy",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"pm.variables.set(\"adminsitrator_username\", \"ANY_LINK\");\r",
											"pm.variables.set(\"adminsitrator_username\", \"ANY_USERNAME\")"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"statusCode\": 401,\r",
											"        \"message\": \"Missing or invalid Authorization header\",\r",
											"        \"error\": \"Unauthorized\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\": \"{{appointment_administrators_admin_username}}\",\r\n    \"appointment\": {\r\n        \"link\": \"{{appointment_administrators_link}}\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/administrators/{{adminsitrator_username}}?appointment={{appointment_link}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"administrators",
										"{{adminsitrator_username}}"
									],
									"query": [
										{
											"key": "appointment",
											"value": "{{appointment_link}}"
										}
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{bearer_manageadministrators}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const username = pm.environment.get(\"keycloak_username_manageadministrators\");",
									"const password = pm.environment.get(\"keycloak_password_manageadministrators\");",
									"",
									"const tokenVariableName = 'bearer_manageadministrators';",
									"const tokenExpriyDateVariableName = 'bearer_manageadministrators_expiry_date';",
									"",
									"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
									"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				},
				{
					"name": "pins",
					"item": [
						{
							"name": "pin",
							"item": [
								{
									"name": "PREPARATION - create Appointment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-pins-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-pins-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-pins-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.collectionVariables.set(\"PREPARATION_appointment_pins_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "pins - success - pin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_pins_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pins",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pins"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - pins - has pinned",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pins?appointment={{PREPARATION_appointment_pins_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pins"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_pins_link}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "unpin",
							"item": [
								{
									"name": "PREPARATION - create Appointment",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"const moment = require('moment');\r",
													"\r",
													"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
													"var date_unix = Date.parse(date);\r",
													"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
													"var deadline_unix = Date.parse(deadline);\r",
													"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
													"\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-pins-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-pins-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-pins-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
													"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\"},\r",
													"        \"link\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\", \"link\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"const jsonData = pm.response.json();\r",
													"\r",
													"pm.collectionVariables.set(\"PREPARATION_appointment_pins_link\", jsonData.link);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/appointments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"appointments"
											]
										}
									},
									"response": []
								},
								{
									"name": "PREPARATION - pins - success - pin",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{PREPARATION_appointment_pins_link}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/pins",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pins"
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - pins - has pinned",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pins?appointment={{PREPARATION_appointment_pins_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pins"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_pins_link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "pins - unpin",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pins?appointment={{PREPARATION_appointment_pins_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pins"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_pins_link}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "VALIDATION - pins - has not pinned",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 404\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(404);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "HEAD",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/pins?appointment={{PREPARATION_appointment_pins_link}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"pins"
											],
											"query": [
												{
													"key": "appointment",
													"value": "{{PREPARATION_appointment_pins_link}}"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "PROTECTION CHECK - pins - pin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"statusCode\": 401,\r",
											"        \"message\": \"Missing or invalid Authorization header\",\r",
											"        \"error\": \"Unauthorized\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pins"
									]
								}
							},
							"response": []
						},
						{
							"name": "PROTECTION CHECK - pins - unpin",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"pm.test(\"Correct JSON response data\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"\r",
											"    pm.expect(jsonData).to.eql({\r",
											"        \"statusCode\": 401,\r",
											"        \"message\": \"Missing or invalid Authorization header\",\r",
											"        \"error\": \"Unauthorized\"\r",
											"    });\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "DELETE",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pins"
									]
								}
							},
							"response": []
						},
						{
							"name": "PROTECTION CHECK - pins - has pinned",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status Code 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "HEAD",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/pins",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"pins"
									]
								}
							},
							"response": []
						}
					],
					"auth": {
						"type": "bearer",
						"bearer": [
							{
								"key": "token",
								"value": "{{bearer_pins}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"type": "text/javascript",
								"exec": [
									"const username = pm.environment.get(\"keycloak_username_pins\");",
									"const password = pm.environment.get(\"keycloak_password_pins\");",
									"",
									"const tokenVariableName = 'bearer_pins';",
									"const tokenExpriyDateVariableName = 'bearer_pins_expiry_date';",
									"",
									"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
									"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					]
				}
			]
		},
		{
			"name": "enrollments",
			"item": [
				{
					"name": "create",
					"item": [
						{
							"name": "main",
							"item": [
								{
									"name": "no auth",
									"item": [
										{
											"name": "create Enrollment - success - minimalist",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-link\");\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
															"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
															"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"string\" },\r",
															"        \"token\": { \"type\": \"string\" }\r",
															"    },\r",
															"    \"required\": [\"id\"],\r",
															"    \"additionalProperties\": false\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_id\", jsonData.id);\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_token\", jsonData.token);\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_name\", pm.variables.get(\"enrollment_creation_name\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_appointment_link\", pm.variables.get(\"enrollment_creation_appointment_link\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - create Entollment - minimalist",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_id\"));\r",
															"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_name\"));\r",
															"  \r",
															"    pm.expect(jsonData.appointment.link).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_appointment_link\"));\r",
															"    pm.expect(jsonData.appointment.location).to.eql(pm.environment.get(\"baseUrl\") + \"/appointments/\" + pm.collectionVariables.get(\"VALIDATION_enrollment_creation_appointment_link\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_creation_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_creation_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "create Enrollment - success - comment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-link\");\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
															"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
															"pm.variables.set(\"enrollment_creation_comment\",  pm.globals.replaceIn(\"{{$randomPhrase}}\"));\r",
															"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"string\" },\r",
															"        \"token\": { \"type\": \"string\" }\r",
															"    },\r",
															"    \"required\": [\"id\"],\r",
															"    \"additionalProperties\": false\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_id\", jsonData.id);\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_token\", jsonData.token);\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_comment\", pm.variables.get(\"enrollment_creation_comment\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_appointment_link\", pm.variables.get(\"enrollment_creation_appointment_link\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"comment\": \"{{enrollment_creation_comment}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - create Entollment - comment",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_id\"));\r",
															"  \r",
															"    pm.expect(jsonData.appointment.link).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_appointment_link\"));\r",
															"    pm.expect(jsonData.appointment.location).to.eql(pm.environment.get(\"baseUrl\") + \"/appointments/\" + pm.collectionVariables.get(\"VALIDATION_enrollment_creation_appointment_link\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_creation_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_creation_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "create Enrollment - success - comment - trim",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-link\");\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
															"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
															"pm.variables.set(\"enrollment_creation_comment\",  \"                      \" + pm.globals.replaceIn(\"{{$randomPhrase}}\") + \"                      \");\r",
															"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"string\" },\r",
															"        \"token\": { \"type\": \"string\" }\r",
															"    },\r",
															"    \"required\": [\"id\"],\r",
															"    \"additionalProperties\": false\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_id\", jsonData.id);\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_token\", jsonData.token);\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_comment\", pm.variables.get(\"enrollment_creation_comment\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_appointment_link\", pm.variables.get(\"enrollment_creation_appointment_link\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"comment\": \"{{enrollment_creation_comment}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - create Entollment - comment - trim",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_id\"));\r",
															"  \r",
															"    pm.expect(jsonData.appointment.link).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_appointment_link\"));\r",
															"    pm.expect(jsonData.appointment.location).to.eql(pm.environment.get(\"baseUrl\") + \"/appointments/\" + pm.collectionVariables.get(\"VALIDATION_enrollment_creation_appointment_link\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_creation_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_creation_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "create Enrollment - failure - no mail provided",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-link\");\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
															"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status Code 401\", function () {\r",
															"    pm.response.to.have.status(401);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"UNAUTHORIZED\",\r",
															"        \"message\": \"Missing or invalid Authorization. Email or Authorization header needed\",\r",
															"        \"data\": [\r",
															"            {\r",
															"                \"attribute\": \"editMail\",\r",
															"                \"in\": \"body\",\r",
															"                \"message\": \"Provide email address for enrollment linking\"\r",
															"            },\r",
															"            {\r",
															"                \"object\": \"user\",\r",
															"                \"attribute\": \"sub\",\r",
															"                \"in\": \"authorization-header\",\r",
															"                \"message\": \"Enroll as authenticated user\"\r",
															"            }\r",
															"        ]\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"comment\": \"{{enrollment_creation_comment}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										},
										{
											"name": "create Enrollment - failure - appointment not found",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  \"INVALID_LINK\");\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
															"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
															"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status Code 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"NOT_FOUND\",\r",
															"        \"message\": \"Requested resource could not be located\",\r",
															"        \"data\": {\r",
															"            \"object\": \"appointment\",\r",
															"            \"attribute\": \"link\",\r",
															"            \"in\": \"body\",\r",
															"            \"value\": pm.variables.get(\"enrollment_creation_appointment_link\")\r",
															"        }\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"comment\": \"{{enrollment_creation_comment}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										},
										{
											"name": "create Enrollment - failure - name - in use",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-existingenrollment-link\");\r",
															"pm.variables.set(\"enrollment_creation_name\",  \"test-createenrollment-existingenrollment-name\");\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
															"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status Code 409\", function () {\r",
															"    pm.response.to.have.status(409);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"DUPLICATE_VALUES\",\r",
															"        \"message\": \"Provided values are already in use\",\r",
															"        \"data\": [{\r",
															"            \"attribute\": \"name\",\r",
															"            \"in\": \"body\",\r",
															"            \"value\": pm.variables.get(\"enrollment_creation_name\"),\r",
															"            \"message\": \"Enrollment with specified name already existing.\"\r",
															"        }]\r",
															"    })\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"comment\": \"{{enrollment_creation_comment}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "auth",
									"item": [
										{
											"name": "PREPARATION - create Appointment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const moment = require('moment');\r",
															"\r",
															"var date = pm.globals.replaceIn('{{$randomDateFuture}}');\r",
															"var date_unix = Date.parse(date);\r",
															"var date_final = moment(date_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
															"\r",
															"var deadline = pm.globals.replaceIn('{{$randomDatePast}}');\r",
															"var deadline_unix = Date.parse(deadline);\r",
															"var deadline_final = moment(deadline_unix).format(\"YYYY-MM-DDThh:mmZ\");\r",
															"\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_title\", \"test-POSTMAN-PREPARATION-createenrollment-title-\" + pm.globals.replaceIn('{{$randomJobTitle}}'));\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_description\", \"test-POSTMAN-PREPARATION-createenrollment-description-\" +pm.globals.replaceIn('{{$randomLoremSentence}}'));\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_location\",  \"test-POSTMAN-PREPARATION-createenrollment-location-\" +pm.globals.replaceIn('{{$randomCity}}'));\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_date\",  date_final);\r",
															"pm.variables.set(\"PREPARATION_appointment_creation_deadline\",  deadline_final);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"string\"},\r",
															"        \"link\": { \"type\": \"string\" }\r",
															"    },\r",
															"    \"required\": [\"id\", \"link\"],\r",
															"    \"additionalProperties\": false\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"const jsonData = pm.response.json();\r",
															"\r",
															"pm.collectionVariables.set(\"PREPARATION_enrollment_creation_appointment_link\", jsonData.link);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"title\": \"{{PREPARATION_appointment_creation_title}}\",\r\n    \"description\": \"{{PREPARATION_appointment_creation_description}}\",\r\n    \"location\": \"{{PREPARATION_appointment_creation_location}}\",\r\n    \"date\": \"{{PREPARATION_appointment_creation_date}}\",\r\n    \"deadline\": \"{{PREPARATION_appointment_creation_deadline}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/appointments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"appointments"
													]
												}
											},
											"response": []
										},
										{
											"name": "create Enrollment - success - minimalist - auth",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  pm.collectionVariables.get(\"PREPARATION_enrollment_creation_appointment_link\"));\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"string\" },\r",
															"        \"token\": { \"type\": \"string\" }\r",
															"    },\r",
															"    \"required\": [\"id\"],\r",
															"    \"additionalProperties\": false\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"    \r",
															"    pm.expect(jsonData).to.not.have.property(\"token\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_id\", jsonData.id);\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_appointment_link\", pm.variables.get(\"PREPARATION_enrollment_creation_appointment_link\"));\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - create Entollment - minimalist - auth",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_id\"));\r",
															"    pm.expect(jsonData).to.not.have.property(\"name\");\r",
															"\r",
															"    pm.expect(jsonData.creator).to.eql({\r",
															"        \"name\": \"GJM-TestUser CreateEnrollment-EnrollmentCreator\",\r",
															"        \"username\": \"gjm-test-createenrollment-enrollmentcreator-user\"\r",
															"    });\r",
															"  \r",
															"    pm.expect(jsonData.appointment.link).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_appointment_link\"));\r",
															"    pm.expect(jsonData.appointment.location).to.eql(pm.environment.get(\"baseUrl\") + \"/appointments/\" + pm.collectionVariables.get(\"VALIDATION_enrollment_creation_appointment_link\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_creation_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_creation_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "create Enrollment - failure - auth - already enrolled",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-existingenrollment-link\");\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
															"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status Code 409\", function () {\r",
															"    pm.response.to.have.status(409);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.code).to.eql(\"DUPLICATE_VALUES\");\r",
															"    pm.expect(jsonData.message).to.eql(\"Provided values are already in use\");\r",
															"    pm.expect(jsonData.data[0].object).to.eql(\"user\");\r",
															"    pm.expect(jsonData.data[0].attribute).to.eql(\"sub\")\r",
															"    pm.expect(jsonData.data[0].in).to.eql(\"authorization-header\");\r",
															"    pm.expect(jsonData.data[0].value).to.match(/.*/);\r",
															"    pm.expect(jsonData.data[0].message).to.eql(\"Authenticated user already enrolled\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearer_createenrollment-enrollmentcreator}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const username = pm.environment.get(\"keycloak_username_createenrollment-enrollmentcreator\");",
													"const password = pm.environment.get(\"keycloak_password_createenrollment-enrollmentcreator\");",
													"",
													"const tokenVariableName = 'bearer_createenrollment-enrollmentcreator';",
													"const tokenExpriyDateVariableName = 'bearer_createenrollment-enrollmentcreator_expiry_date';",
													"",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								}
							]
						},
						{
							"name": "additions",
							"item": [
								{
									"name": "create Enrollment - success - additions - 1",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-additions-link\");\r",
													"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
													"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
													"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");\r",
													"pm.variables.set(\"enrollment_creation_addition_1_id\",  \"626cceb8-916f-4132-b035-ce8eb8403510\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_addition_1_name\",  \"test-createenrollment-additions-name-1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\" },\r",
													"        \"token\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_token\", jsonData.token);\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_1_id\", pm.variables.get(\"enrollment_creation_addition_1_id\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_1_name\", pm.variables.get(\"enrollment_creation_addition_1_name\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\",\r\n    \"additions\": [{\r\n        \"id\": \"{{enrollment_creation_addition_1_id}}\"\r\n    }]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VAILDATION - create Entollment - additions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.additions[0].name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_addition_1_name\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Enrollment-Permission",
												"value": "{{VALIDATION_enrollment_creation_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{VALIDATION_enrollment_creation_location_header}}",
											"host": [
												"{{VALIDATION_enrollment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Enrollment - success - additions - 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-additions-link\");\r",
													"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
													"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
													"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_addition_1_id\",  \"626cceb8-916f-4132-b035-ce8eb8403510\");\r",
													"pm.variables.set(\"enrollment_creation_addition_1_name\",  \"test-createenrollment-additions-name-1\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_addition_3_id\",  \"c96e5fe9-a648-4171-92d4-9c7e96c8ccbf\");\r",
													"pm.variables.set(\"enrollment_creation_addition_3_name\",  \"test-createenrollment-additions-name-3\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\" },\r",
													"        \"token\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_token\", jsonData.token);\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_1_id\", pm.variables.get(\"enrollment_creation_addition_1_id\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_1_name\", pm.variables.get(\"enrollment_creation_addition_1_name\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_3_id\", pm.variables.get(\"enrollment_creation_addition_3_id\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_3_name\", pm.variables.get(\"enrollment_creation_addition_3_name\"));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\",\r\n    \"additions\": [{\r\n        \"id\": \"{{enrollment_creation_addition_1_id}}\"\r\n    }, {\r\n        \"id\": \"{{enrollment_creation_addition_3_id}}\"\r\n    }]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VAILDATION - create Entollment - additions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.additions[0].name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_addition_1_name\"));\r",
													"    pm.expect(jsonData.additions[1].name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_addition_3_name\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Enrollment-Permission",
												"value": "{{VALIDATION_enrollment_creation_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{VALIDATION_enrollment_creation_location_header}}",
											"host": [
												"{{VALIDATION_enrollment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Enrollment - success - additions - all",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-additions-link\");\r",
													"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
													"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
													"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_addition_1_id\",  \"626cceb8-916f-4132-b035-ce8eb8403510\");\r",
													"pm.variables.set(\"enrollment_creation_addition_1_name\",  \"test-createenrollment-additions-name-1\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_addition_2_id\",  \"b190aa03-72d1-4687-8579-0fed36aa78a4\");\r",
													"pm.variables.set(\"enrollment_creation_addition_2_name\",  \"test-createenrollment-additions-name-2\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_addition_3_id\",  \"c96e5fe9-a648-4171-92d4-9c7e96c8ccbf\");\r",
													"pm.variables.set(\"enrollment_creation_addition_3_name\",  \"test-createenrollment-additions-name-3\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_addition_4_id\",  \"e828a2bc-8f00-4926-affc-5dc98b322f12\");\r",
													"pm.variables.set(\"enrollment_creation_addition_4_name\",  \"test-createenrollment-additions-name-4\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\" },\r",
													"        \"token\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_token\", jsonData.token);\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_1_id\", pm.variables.get(\"enrollment_creation_addition_1_id\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_1_name\", pm.variables.get(\"enrollment_creation_addition_1_name\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_2_id\", pm.variables.get(\"enrollment_creation_addition_2_id\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_2_name\", pm.variables.get(\"enrollment_creation_addition_2_name\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_3_id\", pm.variables.get(\"enrollment_creation_addition_3_id\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_3_name\", pm.variables.get(\"enrollment_creation_addition_3_name\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_4_id\", pm.variables.get(\"enrollment_creation_addition_4_id\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_addition_4_name\", pm.variables.get(\"enrollment_creation_addition_4_name\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\",\r\n    \"additions\": [{\r\n        \"id\": \"{{enrollment_creation_addition_1_id}}\"\r\n    }, {\r\n        \"id\": \"{{enrollment_creation_addition_2_id}}\"\r\n    }, {\r\n        \"id\": \"{{enrollment_creation_addition_3_id}}\"\r\n    }, {\r\n        \"id\": \"{{enrollment_creation_addition_4_id}}\"\r\n    }]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VAILDATION - create Entollment - additions",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData.additions[0].name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_addition_1_name\"));\r",
													"    pm.expect(jsonData.additions[1].name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_addition_2_name\"));\r",
													"    pm.expect(jsonData.additions[2].name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_addition_3_name\"));\r",
													"    pm.expect(jsonData.additions[3].name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_addition_4_name\"));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Enrollment-Permission",
												"value": "{{VALIDATION_enrollment_creation_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{VALIDATION_enrollment_creation_location_header}}",
											"host": [
												"{{VALIDATION_enrollment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Enrollment - failure - additions - addition not found",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-additions-link\");\r",
													"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
													"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
													"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");\r",
													"pm.variables.set(\"enrollment_creation_addition_1_id\",  \"INVALID_ID\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_addition_1_name\",  \"test-createenrollment-additions-name-1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 404\", function () {\r",
													"    pm.response.to.have.status(404);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"NOT_FOUND\",\r",
													"        \"message\": \"Requested resource could not be located\",\r",
													"        \"data\": {\r",
													"            \"object\": \"addition\",\r",
													"            \"attribute\": \"id\",\r",
													"            \"in\": \"body\",\r",
													"            \"value\": pm.variables.get(\"enrollment_creation_addition_1_id\"),\r",
													"            \"message\": \"Specified addition does not exist in this appointment\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\",\r\n    \"additions\": [{\r\n        \"id\": \"{{enrollment_creation_addition_1_id}}\"\r\n    }]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "driverAddition",
							"item": [
								{
									"name": "create Enrollment - success - driverAddition - driver",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-driverAddition-link\");\r",
													"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
													"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
													"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_driver_service\",  \"1\");\r",
													"pm.variables.set(\"enrollment_creation_driver_seats\",  \"4\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\" },\r",
													"        \"token\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_token\", jsonData.token);\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_driver_service\", pm.variables.get(\"enrollment_creation_driver_service\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_driver_seats\", pm.variables.get(\"enrollment_creation_driver_seats\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\",\r\n    \"driver\": {\r\n        \"seats\": \"{{enrollment_creation_driver_seats}}\",\r\n        \"service\": \"{{enrollment_creation_driver_service}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VAILDATION - create Entollment - driverAddition - driver",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.not.have.property(\"passenger\");\r",
													"    pm.expect(jsonData.driver.seats).to.eql(Number(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_driver_seats\")));\r",
													"    pm.expect(jsonData.driver.service).to.eql(Number(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_driver_service\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Enrollment-Permission",
												"value": "{{VALIDATION_enrollment_creation_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{VALIDATION_enrollment_creation_location_header}}",
											"host": [
												"{{VALIDATION_enrollment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Enrollment - success - driverAddition - passenger",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-driverAddition-link\");\r",
													"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
													"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
													"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");\r",
													"\r",
													"pm.variables.set(\"enrollment_creation_passenger_requirement\",  \"1\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Successful POST request\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"\r",
													"const schema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\": {\r",
													"        \"id\": { \"type\": \"string\" },\r",
													"        \"token\": { \"type\": \"string\" }\r",
													"    },\r",
													"    \"required\": [\"id\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test(\"Validate schema\", () => {\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"var jsonData = pm.response.json();\r",
													"\r",
													"pm.test(\"Location header is present\", function () {\r",
													"    pm.response.to.have.header(\"Location\");\r",
													"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
													"});\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_location_header\", pm.response.headers.get(\"Location\"));\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_token\", jsonData.token);\r",
													"\r",
													"pm.collectionVariables.set(\"VALIDATION_enrollment_creation_passenger_requirement\", pm.variables.get(\"enrollment_creation_passenger_requirement\"));\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\",\r\n    \"passenger\": {\r\n        \"requirement\": \"{{enrollment_creation_passenger_requirement}}\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments"
											]
										}
									},
									"response": []
								},
								{
									"name": "VAILDATION - create Entollment - driverAddition - passenger",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {\r",
													"    pm.expect(pm.response.code).to.equal(200);\r",
													"});\r",
													"\r",
													"pm.test(\"Valid schema\", () => {\r",
													"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
													"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
													"\r",
													"    pm.response.to.have.jsonSchema(schema);\r",
													"});\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    const jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.not.have.property(\"driver\");\r",
													"    pm.expect(jsonData.passenger.requirement).to.eql(Number(pm.collectionVariables.get(\"VALIDATION_enrollment_creation_passenger_requirement\")));\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "X-Enrollment-Permission",
												"value": "{{VALIDATION_enrollment_creation_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{VALIDATION_enrollment_creation_location_header}}",
											"host": [
												"{{VALIDATION_enrollment_creation_location_header}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Enrollment - failure - driverAddition - not provided",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-createenrollment-driverAddition-link\");\r",
													"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
													"pm.variables.set(\"enrollment_creation_name\",  pm.globals.replaceIn(\"{{$randomUserName}}\"));\r",
													"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentcreation@testing.go-join.me\");"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"MISSING_VALUES\",\r",
													"        \"message\": \"Please specify one of the following values\",\r",
													"        \"data\": [\r",
													"            \"driver\",\r",
													"            \"passenger\"\r",
													"        ]\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"name\": \"{{enrollment_creation_name}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/enrollments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "{id}",
					"item": [
						{
							"name": "update",
							"item": [
								{
									"name": "main (permissions checks)",
									"item": [
										{
											"name": "update Enrollment - success - enrollment creator",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const username = pm.environment.get(\"keycloak_username_updateenrollment-enrollmentcreator\");\r",
															"const password = pm.environment.get(\"keycloak_password_updateenrollment-enrollmentcreator\");\r",
															"\r",
															"const tokenVariableName = 'bearer_updateenrollment-enrollmentcreator';\r",
															"const tokenExpriyDateVariableName = 'bearer_updateenrollment-enrollmentcreator_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_comment\", pm.variables.get('enrollment_update_comment_new'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_updateenrollment-enrollmentcreator}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"{{enrollment_update_comment_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - update Entollment - enrollment creator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"  \r",
															"    pm.expect(jsonData.comment).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_update_comment\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - success - appointment creator",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const username = pm.environment.get(\"keycloak_username_updateenrollment-appointmentcreator\");\r",
															"const password = pm.environment.get(\"keycloak_password_updateenrollment-appointmentcreator\");\r",
															"\r",
															"const tokenVariableName = 'bearer_updateenrollment-appointmentcreator';\r",
															"const tokenExpriyDateVariableName = 'bearer_updateenrollment-appointmentcreator_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_comment\", pm.variables.get('enrollment_update_comment_new'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_updateenrollment-appointmentcreator}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"{{enrollment_update_comment_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - update Entollment - appointment creator",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.comment).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_update_comment\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - success - appointment admin",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const username = pm.environment.get(\"keycloak_username_updateenrollment-appointmentadmin\");\r",
															"const password = pm.environment.get(\"keycloak_password_updateenrollment-appointmentadmin\");\r",
															"\r",
															"const tokenVariableName = 'bearer_updateenrollment-appointmentadmin';\r",
															"const tokenExpriyDateVariableName = 'bearer_updateenrollment-appointmentadmin_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_comment\", pm.variables.get('enrollment_update_comment_new'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_updateenrollment-appointmentadmin}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"{{enrollment_update_comment_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - update Entollment - appointment admin",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.comment).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_update_comment\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - success - enrollment token",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_comment\", pm.variables.get('enrollment_update_comment_new'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [
													{
														"key": "x-enrollment-token",
														"value": "{{enrollment_update_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"{{enrollment_update_comment_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - update Entollment - appointment admin Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.comment).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_update_comment\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - failure - any user",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"const username = pm.environment.get(\"keycloak_username_updateenrollment-regularuser\");\r",
															"const password = pm.environment.get(\"keycloak_password_updateenrollment-regularuser\");\r",
															"\r",
															"const tokenVariableName = 'bearer_updateenrollment-regularuser';\r",
															"const tokenExpriyDateVariableName = 'bearer_updateenrollment-regularuser_expiry_date';\r",
															"\r",
															"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));\r",
															"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
															"        \"message\": \"Missing permissions to execute request\",\r",
															"        \"data\": {\r",
															"            \"attribute\": \"id\",\r",
															"            \"in\": \"path\",\r",
															"            \"value\": pm.variables.get(\"enrollment_update_id\"),\r",
															"            \"message\": \"Specified enrollment is not in your ownership. You are also not permitted by being a manager of the related appointment.\"\r",
															"        }\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "bearer",
													"bearer": [
														{
															"key": "token",
															"value": "{{bearer_updateenrollment-regularuser}}",
															"type": "string"
														}
													]
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"{{enrollment_update_comment_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - failure - no permission",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code 403\", function () {\r",
															"    pm.response.to.have.status(403);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
															"        \"message\": \"Missing permissions to execute request\",\r",
															"        \"data\": {\r",
															"            \"attribute\": \"id\",\r",
															"            \"in\": \"path\",\r",
															"            \"value\": pm.variables.get(\"enrollment_update_id\"),\r",
															"            \"message\": \"Specified enrollment is not in your ownership. You are also not permitted by being a manager of the related appointment.\"\r",
															"        }\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "PUT",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"{{enrollment_update_comment_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.variables.set(\"enrollment_update_id\", \"1f4815c0-a38a-4f72-a1ad-9f36f61494cf\"); // ENROLLMENT CREATED BY USER",
													"pm.variables.set(\"enrollment_update_comment_new\", pm.globals.replaceIn(\"{{$randomPhrase}}\"));",
													"pm.variables.set(\"enrollment_update_token\", \"857f0ad939769f7ea3a1c0385521823214171b9fe6edd1b585de45b894af9f23\")"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "name",
									"item": [
										{
											"name": "update Enrollment - success - name",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_update_name_new\", \"test-POSTMAN-enrollmentupdate-name-new-\" + pm.globals.replaceIn(\"{{$randomUserName}}\"))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_name\", pm.variables.get('enrollment_update_name_new'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{enrollment_update_name_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - update Entollment - name",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"    pm.expect(jsonData.name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_update_name\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - failure - name - in use",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_update_name_new\", \"test-updateenrollment-existingname-name\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code 400\", function () {\r",
															"    pm.response.to.have.status(400);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"DUPLICATE_ENTRY\",\r",
															"        \"message\": \"Following values are duplicates and can not be used\",\r",
															"        \"data\": [\r",
															"            {\r",
															"                \"attribute\": \"name\",\r",
															"                \"in\": \"body\",\r",
															"                \"value\": pm.variables.get(\"enrollment_update_name_new\"),\r",
															"                \"message\": \"The specified name is already used by another enrollment. A person can only be enrolled once.\"\r",
															"            }\r",
															"        ]\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{enrollment_update_name_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - failure - name - can not update name of enrollment created by user",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_update_id\", \"1f4815c0-a38a-4f72-a1ad-9f36f61494cf\");\r",
															"\r",
															"pm.variables.set(\"enrollment_update_name_new\", \"test-POSTMAN-enrollmentupdate-name-new-\" + pm.globals.replaceIn(\"{{$randomUserName}}\"))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code 422\", function () {\r",
															"    pm.response.to.have.status(422);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"INVALID_ATTRIBUTE\",\r",
															"        \"message\": \"Following attributes are not allowed to be updated\",\r",
															"        \"data\": [\r",
															"            {\r",
															"                \"attribute\": \"name\",\r",
															"                \"in\": \"body\",\r",
															"                \"value\": pm.variables.get(\"enrollment_update_name_new\"),\r",
															"                \"message\": \"The specified enrollment got created by an authenticated user. Thus the name can not be modified.\"\r",
															"            }\r",
															"        ]\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"name\": \"{{enrollment_update_name_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearer_updateenrollment-appointmentcreator}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.variables.set(\"enrollment_update_id\", \"36aa22e6-43cf-42c1-a10b-8a4de1460e0d\");",
													"",
													"const username = pm.environment.get(\"keycloak_username_updateenrollment-appointmentcreator\");",
													"const password = pm.environment.get(\"keycloak_password_updateenrollment-appointmentcreator\");",
													"",
													"const tokenVariableName = 'bearer_updateenrollment-appointmentcreator';",
													"const tokenExpriyDateVariableName = 'bearer_updateenrollment-appointmentcreator_expiry_date';",
													"",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "comment",
									"item": [
										{
											"name": "update Enrollment - success - comment",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_update_comment_new\", \"test-POSTMAN-enrollmentupdate-comment-new-\" + pm.globals.replaceIn(\"{{$randomPhrase}}\"))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_comment\", pm.variables.get('enrollment_update_comment_new'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"{{enrollment_update_comment_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - update Entollment - enrollment creator Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"  \r",
															"    pm.expect(jsonData.comment).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_update_comment\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - success - comment - trim",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_update_comment_new\", \"test-POSTMAN-enrollmentupdate-comment-new-\" + pm.globals.replaceIn(\"{{$randomPhrase}}\"))"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_comment\", pm.variables.get('enrollment_update_comment_new'));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"                       {{enrollment_update_comment_new}}                              \"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - update Entollment - enrollment creator Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"\r",
															"  \r",
															"    pm.expect(jsonData.comment).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_update_comment\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - success - comment - trim (change to null)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_update_name_new\", \"                       \");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"comment\": \"{{enrollment_update_name_new}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VAILDATION - update Entollment - enrollment creator Copy 3",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"  \r",
															"    pm.expect(jsonData).to.not.have.property(\"comment\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearer_updateenrollment-appointmentcreator}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"pm.variables.set(\"enrollment_update_id\", \"36aa22e6-43cf-42c1-a10b-8a4de1460e0d\");",
													"",
													"const username = pm.environment.get(\"keycloak_username_updateenrollment-appointmentcreator\");",
													"const password = pm.environment.get(\"keycloak_password_updateenrollment-appointmentcreator\");",
													"",
													"const tokenVariableName = 'bearer_updateenrollment-appointmentcreator';",
													"const tokenExpriyDateVariableName = 'bearer_updateenrollment-appointmentcreator_expiry_date';",
													"",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "additions",
									"item": [
										{
											"name": "PREPARATION - create Enrollment - success - additions (no additions)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-updateenrollment-additions-link\");\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
															"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentupdate@testing.go-join.me\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"string\" },\r",
															"        \"token\": { \"type\": \"string\" }\r",
															"    },\r",
															"    \"required\": [\"id\"],\r",
															"    \"additionalProperties\": false\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"PREPARATION_enrollment_creation_id\", jsonData.id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\"\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - success - additions - add two",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_update_additions_addition_1_name\", \"test-updateenrollment-additions-name-1\");\r",
															"pm.variables.set(\"enrollment_update_additions_addition_1_id\", \"47c04799-b6e4-4160-abd0-49c046d1a8e8\");\r",
															"pm.variables.set(\"enrollment_update_additions_addition_2_name\", \"test-updateenrollment-additions-name-2\");\r",
															"pm.variables.set(\"enrollment_update_additions_addition_2_id\", \"0e352275-6e92-474c-b5af-9810b000d8bb\")\r",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_additions_addition_1_name\", pm.variables.get(\"enrollment_update_additions_addition_1_name\"));\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_additions_addition_2_name\", pm.variables.get(\"enrollment_update_additions_addition_2_name\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"additions\": [\r\n        {\r\n            \"id\": \"{{enrollment_update_additions_addition_1_id}}\"\r\n        }, {\r\n            \"id\": \"{{enrollment_update_additions_addition_2_id}}\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{PREPARATION_enrollment_creation_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{PREPARATION_enrollment_creation_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VALIDATION - update Entollment - additions - add two",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"  \r",
															"    pm.expect(jsonData.additions).to.have.lengthOf(2);\r",
															"\r",
															"    pm.expect(jsonData.additions.sort()[0].name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_update_additions_addition_1_name\"));\r",
															"    pm.expect(jsonData.additions.sort()[1].name).to.eql(pm.collectionVariables.get(\"VALIDATION_enrollment_update_additions_addition_2_name\"));\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "PREPARATION - create Enrollment - success - additions (two additions)",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_creation_appointment_link\",  \"test-updateenrollment-additions-link\");\r",
															"pm.variables.set(\"enrollment_creation_domain\",  \"https://testing.go-join.me/{{0}}/{{1}}\");\r",
															"pm.variables.set(\"enrollment_creation_editMail\",  \"enrollmentupdate@testing.go-join.me\");\r",
															"\r",
															"pm.variables.set(\"enrollment_update_additions_addition_1_id\", \"47c04799-b6e4-4160-abd0-49c046d1a8e8\");\r",
															"pm.variables.set(\"enrollment_update_additions_addition_2_id\", \"0e352275-6e92-474c-b5af-9810b000d8bb\")"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Successful POST request\", function () {\r",
															"    pm.response.to.have.status(201);\r",
															"});\r",
															"\r",
															"const schema = {\r",
															"    \"type\": \"object\",\r",
															"    \"properties\": {\r",
															"        \"id\": { \"type\": \"string\" },\r",
															"        \"token\": { \"type\": \"string\" }\r",
															"    },\r",
															"    \"required\": [\"id\"],\r",
															"    \"additionalProperties\": false\r",
															"};\r",
															"\r",
															"pm.test(\"Validate schema\", () => {\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"var jsonData = pm.response.json();\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"    pm.response.to.be.header(\"Location\", pm.environment.get(\"baseUrl\") + \"/enrollments/\" + jsonData.id);\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"PREPARATION_enrollment_creation_id\", jsonData.id);\r",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "noauth"
												},
												"method": "POST",
												"header": [],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"appointment\": {\r\n        \"link\": \"{{enrollment_creation_appointment_link}}\"\r\n    },\r\n    \"domain\": \"{{enrollment_creation_domain}}\",\r\n    \"editMail\": \"{{enrollment_creation_editMail}}\",\r\n    \"additions\": [\r\n        {\r\n            \"id\": \"{{enrollment_update_additions_addition_1_id}}\"\r\n        }, {\r\n            \"id\": \"{{enrollment_update_additions_addition_2_id}}\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - success - additions - remove all",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(204);\r",
															"});\r",
															"\r",
															"pm.test(\"Location header is present\", function () {\r",
															"    pm.response.to.have.header(\"Location\");\r",
															"});\r",
															"\r",
															"pm.collectionVariables.set(\"VALIDATION_enrollment_update_location_header\", pm.response.headers.get(\"Location\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"additions\": []\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{PREPARATION_enrollment_creation_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{PREPARATION_enrollment_creation_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "VALIDATION - update Entollment - additions - add two Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {\r",
															"    pm.expect(pm.response.code).to.equal(200);\r",
															"});\r",
															"\r",
															"pm.test(\"Valid schema\", () => {\r",
															"    const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));\r",
															"    const schema = JSON.parse(getSchemaString(\"schema_enrollment\"));\r",
															"\r",
															"    pm.response.to.have.jsonSchema(schema);\r",
															"});\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    const jsonData = pm.response.json();\r",
															"  \r",
															"    pm.expect(jsonData).to.not.have.property('additions');\r",
															"});"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "X-Enrollment-Permission",
														"value": "{{VALIDATION_enrollment_creation_token}}",
														"type": "text"
													}
												],
												"url": {
													"raw": "{{VALIDATION_enrollment_update_location_header}}",
													"host": [
														"{{VALIDATION_enrollment_update_location_header}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "update Enrollment - failure - additions - invalid addititon",
											"event": [
												{
													"listen": "prerequest",
													"script": {
														"exec": [
															"pm.variables.set(\"enrollment_update_additions_id\", \"9dd1e2c9-416f-4e47-963c-f6c916b13f3b\");\r",
															"\r",
															"pm.variables.set(\"enrollment_update_additions_addition_1_id\", \"INVALID_ADDTION_ID\");"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code 404\", function () {\r",
															"    pm.response.to.have.status(404);\r",
															"});\r",
															"\r",
															"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
															"testSchema(pm.response);\r",
															"\r",
															"pm.test(\"Correct JSON response data\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    \r",
															"    pm.expect(jsonData).to.eql({\r",
															"        \"code\": \"NOT_FOUND\",\r",
															"        \"message\": \"Requested resource could not be located\",\r",
															"        \"data\": {\r",
															"            \"object\": \"addition\",\r",
															"            \"attribute\": \"id\",\r",
															"            \"in\": \"body\",\r",
															"            \"value\": pm.variables.get(\"enrollment_update_additions_addition_1_id\"),\r",
															"            \"message\": \"Specified addition does not exist in this appointment\"\r",
															"        }\r",
															"    });\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "",
														"value": "",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"additions\": [\r\n        {\r\n            \"id\": \"{{enrollment_update_additions_addition_1_id}}\"\r\n        }\r\n    ]\r\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{baseUrl}}/enrollments/{{enrollment_update_additions_id}}",
													"host": [
														"{{baseUrl}}"
													],
													"path": [
														"enrollments",
														"{{enrollment_update_additions_id}}"
													]
												}
											},
											"response": []
										}
									],
									"auth": {
										"type": "bearer",
										"bearer": [
											{
												"key": "token",
												"value": "{{bearer_updateenrollment-appointmentcreator}}",
												"type": "string"
											}
										]
									},
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"type": "text/javascript",
												"exec": [
													"const username = pm.environment.get(\"keycloak_username_updateenrollment-appointmentcreator\");",
													"const password = pm.environment.get(\"keycloak_password_updateenrollment-appointmentcreator\");",
													"",
													"const tokenVariableName = 'bearer_updateenrollment-appointmentcreator';",
													"const tokenExpriyDateVariableName = 'bearer_updateenrollment-appointmentcreator_expiry_date';",
													"",
													"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
													"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									]
								},
								{
									"name": "__driverAddition",
									"item": []
								}
							]
						},
						{
							"name": "__get",
							"item": []
						}
					]
				},
				{
					"name": "__delete",
					"item": []
				},
				{
					"name": "permissions",
					"item": [
						{
							"name": "as appointment creator",
							"item": [
								{
									"name": "check Permission - success - enrollment by user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", '13fe4f6c-b1ef-4b94-8e3c-95ee95e3efb5');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								},
								{
									"name": "check Permission - success - enrollment by unknown",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", 'cde285ef-b0b0-466c-86a9-bf146a39b59d');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_enrollmentpermission-appointmentcreator}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_enrollmentpermission-appointmentcreator\");",
											"const password = pm.environment.get(\"keycloak_password_enrollmentpermission-appointmentcreator\");",
											"",
											"const tokenVariableName = 'bearer_enrollmentpermission-appointmentcreator';",
											"const tokenExpriyDateVariableName = 'bearer_enrollmentpermission-appointmentcreator_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "as appointment admin",
							"item": [
								{
									"name": "check Permission - success - enrollment by user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", '13fe4f6c-b1ef-4b94-8e3c-95ee95e3efb5');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								},
								{
									"name": "check Permission - success - enrollment by unknown",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", 'cde285ef-b0b0-466c-86a9-bf146a39b59d');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_enrollmentpermission-appointmentadmin}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_enrollmentpermission-appointmentadmin\");",
											"const password = pm.environment.get(\"keycloak_password_enrollmentpermission-appointmentadmin\");",
											"",
											"const tokenVariableName = 'bearer_enrollmentpermission-appointmentadmin';",
											"const tokenExpriyDateVariableName = 'bearer_enrollmentpermission-appointmentadmi_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "as enrollment creator",
							"item": [
								{
									"name": "check Permission - success - enrollment by user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", '13fe4f6c-b1ef-4b94-8e3c-95ee95e3efb5');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								},
								{
									"name": "check Permission - success - enrollment by unknown",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", 'cde285ef-b0b0-466c-86a9-bf146a39b59d');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
													"        \"message\": \"Missing permissions to execute request\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"id\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"enrollment_permission_id\"),\r",
													"            \"message\": \"Specified enrollment is not in your ownership. You are also not permitted by being a manager of the related appointment.\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_enrollmentpermission-enrollmentcreator}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_enrollmentpermission-enrollmentcreator\");",
											"const password = pm.environment.get(\"keycloak_password_enrollmentpermission-enrollmentcreator\");",
											"",
											"const tokenVariableName = 'bearer_enrollmentpermission-enrollmentcreator';",
											"const tokenExpriyDateVariableName = 'bearer_enrollmentpermission-enrollmentcreator_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "as authenticated user",
							"item": [
								{
									"name": "check Permission - success - enrollment by user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", '13fe4f6c-b1ef-4b94-8e3c-95ee95e3efb5');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
													"        \"message\": \"Missing permissions to execute request\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"id\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"enrollment_permission_id\"),\r",
													"            \"message\": \"Specified enrollment is not in your ownership. You are also not permitted by being a manager of the related appointment.\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								},
								{
									"name": "check Permission - success - enrollment by unknown",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", 'cde285ef-b0b0-466c-86a9-bf146a39b59d');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
													"        \"message\": \"Missing permissions to execute request\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"id\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"enrollment_permission_id\"),\r",
													"            \"message\": \"Specified enrollment is not in your ownership. You are also not permitted by being a manager of the related appointment.\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								}
							],
							"auth": {
								"type": "bearer",
								"bearer": [
									{
										"key": "token",
										"value": "{{bearer_enrollmentpermission-regularuser}}",
										"type": "string"
									}
								]
							},
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"type": "text/javascript",
										"exec": [
											"const username = pm.environment.get(\"keycloak_username_enrollmentpermission-regularuser\");",
											"const password = pm.environment.get(\"keycloak_password_enrollmentpermission-regularuser\");",
											"",
											"const tokenVariableName = 'bearer_enrollmentpermission-regularuser';",
											"const tokenExpriyDateVariableName = 'bearer_enrollmentpermission-regularuser_expiry_date';",
											"",
											"const generateAccessTokenIfNeeded = eval(pm.globals.get(\"function_generateAccessTokenIfNeeded\"));",
											"generateAccessTokenIfNeeded(username, password, tokenVariableName, tokenExpriyDateVariableName);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							]
						},
						{
							"name": "unauthenticated",
							"item": [
								{
									"name": "check Permission - success - enrollment by user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", '13fe4f6c-b1ef-4b94-8e3c-95ee95e3efb5');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
													"        \"message\": \"Missing permissions to execute request\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"id\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"enrollment_permission_id\"),\r",
													"            \"message\": \"Specified enrollment is not in your ownership. You are also not permitted by being a manager of the related appointment.\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								},
								{
									"name": "check Permission - success - enrollment by unknown",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", 'cde285ef-b0b0-466c-86a9-bf146a39b59d');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 403\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"\r",
													"const testSchema = eval(pm.globals.get(\"test_correctErrorResponseSchema\"));\r",
													"testSchema(pm.response);\r",
													"\r",
													"pm.test(\"Correct JSON response data\", function () {\r",
													"    var jsonData = pm.response.json();\r",
													"\r",
													"    pm.expect(jsonData).to.eql({\r",
													"        \"code\": \"INSUFFICIENT_PERMISSIONS\",\r",
													"        \"message\": \"Missing permissions to execute request\",\r",
													"        \"data\": {\r",
													"            \"attribute\": \"id\",\r",
													"            \"in\": \"path\",\r",
													"            \"value\": pm.variables.get(\"enrollment_permission_id\"),\r",
													"            \"message\": \"Specified enrollment is not in your ownership. You are also not permitted by being a manager of the related appointment.\"\r",
													"        }\r",
													"    });\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "permission token",
							"item": [
								{
									"name": "check Permission - success - enrollment by user",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", '13fe4f6c-b1ef-4b94-8e3c-95ee95e3efb5');\r",
													"pm.variables.set(\"enrollment_permission_token\", 'fea4fd82366cdd4acfe4a536df9115bd02f9b5795bce4ee9656896787339aa65');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-enrollment-token",
												"value": "{{enrollment_permission_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								},
								{
									"name": "check Permission - success - enrollment by unknown",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"pm.variables.set(\"enrollment_permission_id\", 'cde285ef-b0b0-466c-86a9-bf146a39b59d');\r",
													"pm.variables.set(\"enrollment_permission_token\", 'a24c8782cf921c9dc89e664cf44935fb37aafd07642f00ed56575f867ec2259d');"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status Code 204\", function () {\r",
													"    pm.response.to.have.status(204);\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "x-enrollment-token",
												"value": "{{enrollment_permission_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/enrollments/{{enrollment_permission_id}}/check-permission",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"enrollments",
												"{{enrollment_permission_id}}",
												"check-permission"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"postman.setGlobalVariable(\"function_generateAccessTokenIfNeeded\",",
					" (username, password, tokenVariableName, tokenExpriyDateVariableName) => {",
					"    var t = new Date();",
					"",
					"    if(!pm.collectionVariables.get(tokenExpriyDateVariableName)",
					"       || pm.collectionVariables.get(tokenExpriyDateVariableName) < t.toISOString()",
					"       || !pm.collectionVariables.get(tokenVariableName)) {",
					"        var server       = pm.environment.get(\"keycloak_url\")",
					"        var realm        = pm.environment.get(\"keycloak_realm\")",
					"        var grantType    = \"password\";",
					"        var clientId     = pm.environment.get(\"keycloak_client_id\")",
					"        var clientSecret = pm.environment.get(\"keycloak_client_secret\");",
					"",
					"        var url  = `${server}/auth/realms/${realm}/protocol/openid-connect/token`;",
					"        var data = `grant_type=${grantType}&client_id=${clientId}&username=${username}&password=${password}&client_secret=${clientSecret}`;",
					"",
					"        pm.sendRequest({",
					"            url: url,",
					"            method: 'POST',",
					"            header: { 'Content-Type': 'application/x-www-form-urlencoded'},",
					"            body: {",
					"                mode: 'raw',",
					"                raw: data",
					"            }",
					"        },  function(err, response) {",
					"            var response_json = response.json();",
					"            var token = response_json.access_token;",
					"            pm.collectionVariables.set(tokenVariableName, token);",
					"",
					"            var t = new Date();",
					"            t.setSeconds(t.getSeconds() + response_json.expires_in);",
					"",
					"            pm.collectionVariables.set(tokenExpriyDateVariableName, t);",
					"        });",
					"    }",
					"});",
					"",
					"postman.setGlobalVariable(\"test_correctErrorResponseSchema\", (response) => {",
					"    const schema = JSON.parse(pm.collectionVariables.get(\"schema_error\"));",
					"",
					"    pm.test(\"Validate schema\", () => {",
					"        response.to.have.jsonSchema(schema);",
					"    });",
					"});",
					"",
					"postman.setGlobalVariable(\"function_getSchemaStringRecursively\",",
					" (schemaName) => {",
					"    let schema = pm.variables.get(schemaName);",
					"",
					"    let myRegexp = new RegExp(\"\\#\\#REPLACE_SCHEMA\\((schema_.*)\\)\\#\\#\", \"gm\");",
					"    while ((match = myRegexp.exec(schema)) !== null) {",
					"        console.log(match);",
					"        const subSchemaName = match;",
					"        const getSchemaString = eval(pm.globals.get(\"function_getSchemaStringRecursively\"));",
					"        const subSchema = getSchemaString(subSchemaName);",
					"        ",
					"        schema = schema.replace(\"##REPLACE_SCHEMA(\" + subSchemaName + \")##\", subSchema);",
					"    }",
					"    ",
					"    return schema;",
					"});"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "schema_appointment",
			"value": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"relations\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": { \"type\": \"string\" }\n\t\t},\n\t\t\"id\": { \"type\": \"string\" },\n\t\t\"title\": { \"type\": \"string\" },\n\t\t\"description\": { \"type\": \"string\" },\n\t\t\"link\": { \"type\": \"string\" },\n\t\t\"location\": { \"type\": \"string\" },\n\t\t\"date\": { \n\t\t\t\"type\": \"string\",\n\t\t\t\"format\": \"date-time\"    \n\t\t},\n\t\t\"deadline\": { \n\t\t\t\"type\": \"string\",\n\t\t\t\"format\": \"date-time\"    \n\t\t},\n\t\t\"creator\": ##REPLACE_SCHEMA(schema_user_minified)##,\n\t\t\"maxEnrollments\": { \"type\": \"number\" },\n\t\t\"hidden\": { \"type\": \"boolean\" },\n\t\t\"driverAddition\": { \"type\": \"boolean\" },\n\t\t\"additions\": { \n\t\t\t\"type\": \"array\" ,\n\t\t\t\"items\": ##REPLACE_SCHEMA(schema_addition)##\n\t\t},\n\t\t\"files\": { \n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": ##REPLACE_SCHEMA(schema_file)##\n\t\t},\n\t\t\"administrators\": { \n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": ##REPLACE_SCHEMA(schema_user_minified)##\n\t\t},\n\t\t\"enrollments\": { \n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": ##REPLACE_SCHEMA(schema_enrollment)##\n\t\t},\n\t\t\"iat\": { \n\t\t\t\"type\": \"string\",\n\t\t\t\"format\": \"date-time\"    \n\t\t},\n\t\t\"lud\": { \n\t\t\t\"type\": \"string\",\n\t\t\t\"format\": \"date-time\"    \n\t\t}\n\t},\n\t\"required\": [ \"id\", \"title\", \"description\", \"link\", \"location\", \"date\", \"deadline\", \"hidden\", \"driverAddition\", \"creator\" ],\n\t\"additionalProperties\": false\n}"
		},
		{
			"key": "schema_user_minified",
			"value": "{ \n\t\t\t\"type\": \"object\",\n\t\t\t\"properties\": {\n\t\t\t\t\"name\": { \"type\": \"string\" },\n\t\t\t\t\"username\": { \"type\": \"string\" }\n\t\t\t}\n\t\t}"
		},
		{
			"key": "schema_addition",
			"value": "{ \n\t\"type\": \"object\",\n\t\"properties\": {\n\t    \"id\": {\n            \"type\": \"string\"\n        },\n\t\t\"name\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"order\": { \n\t\t\t\"type\": \"number\"\n\t\t}\n\t},\n\t\"required\": [ \"name\" ],\n\t\"additionalProperties\": false\n}"
		},
		{
			"key": "schema_file",
			"value": "{ \n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"id\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"name\": { \n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"url\": {\n            \"type\": \"string\"\n        }\n\t},\n\t\"required\": [ \"id\", \"name\", \"url\" ],\n\t\"additionalProperties\": false\n}"
		},
		{
			"key": "schema_enrollment",
			"value": "{ \n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"id\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"name\": { \n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"comment\": { \n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"driver\":  ##REPLACE_SCHEMA(schema_driver)##,\n\t\t\"passenger\": ##REPLACE_SCHEMA(schema_passenger)##,\n\t\t\"additions\": { \n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": ##REPLACE_SCHEMA(schema_addition)##\n\t\t},\n\t\t\"creator\": ##REPLACE_SCHEMA(schema_user_minified)##,\n\t\t\"iat\": { \n\t\t\t\"type\": \"string\",\n\t\t\t\"format\": \"date-time\"    \n\t\t},\n\t\t\"appointment\": {\n\t\t    \"type\": \"object\",\n\t\t    \"properties\": {\n\t\t        \"link\": { \"type\": \"string\" },\n\t\t        \"location\": { \"type\": \"string\" }\n\t\t    }\n\t\t}\n\t},\n\t\"required\": [ \"id\", \"iat\" ],\n\t\"additionalProperties\": false\n}"
		},
		{
			"key": "schema_driver",
			"value": "{ \n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"service\": { \n\t\t\t\"type\": \"number\"\n\t\t},\n\t\t\"seats\": { \n\t\t\t\"type\": \"number\"\n\t\t}\n\t},\n\t\"required\": [ \"service\", \"seats\"],\n\t\"additionalProperties\": false\n}"
		},
		{
			"key": "schema_passenger",
			"value": "{ \n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"requirement\": { \n\t\t\t\"type\": \"number\"\n\t\t}\n\t},\n\t\"required\": [ \"requirement\"],\n\t\"additionalProperties\": false\n}\n"
		},
		{
			"key": "schema_error",
			"value": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"code\": { \"type\": \"string\"},\n\t\t\"message\": { \"type\": \"string\" },\n\t\t\"data\":  {\n\t\t\t\"anyOf\": [\n\t\t\t\t{ \n\t\t\t\t\t\"type\": \"object\",\n\t\t\t\t\t\"properties\": {\n\t\t\t\t\t    \"object\": { \"type\": \"string\" },\n\t\t\t\t\t\t\"attribute\": { \"type\": \"string\" },\n\t\t\t\t\t\t\"value\": { \"type\": \"string\" },\n\t\t\t\t\t\t\"in\": { \"type\": \"string\" },\n\t\t\t\t\t\t\"message\": { \"type\": \"string\" }\n\t\t\t\t\t},\n\t\t\t\t\t\"required\": [\n\t\t\t\t\t\t\"attribute\",\n\t\t\t\t\t\t\"value\"\n\t\t\t\t\t] \n\t\t\t\t},\n\t\t\t\t{ \"type\": \"string\" },\n\t\t\t\t{ \n\t\t\t\t\t\"type\": \"array\",\n\t\t\t\t\t\"items\": {\n\t\t\t\t\t\t\"anyOf\": [\n\t\t\t\t\t\t\t{ \"type\": \"object\" },\n\t\t\t\t\t\t\t{ \"type\": \"string\" }\n\t\t\t\t\t\t]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t]\n\t\t}\n\t},\n\t\"required\": [\"code\", \"message\"],\n\t\"additionalProperties\": false\n}"
		},
		{
			"key": "bearer_createappointment",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk1NTksImlhdCI6MTYxNjQ4OTI1OSwianRpIjoiOTMyMWZjMzktNTY3My00ZGQ2LThjMjktZDczOWNiNDgwZWFkIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJjOWVlZThjMS1lNzAxLTRhM2QtOGNiOS02ZTdjZDEyMDlhYmEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjM5OWZhZmZhLWViNDMtNDY0My1hMThiLWVkNmZmZWQwNDg3ZSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIENyZWF0ZUFwcG9pbnRtZW50IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtY3JlYXRlYXBwb2ludG1lbnQtdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6IkNyZWF0ZUFwcG9pbnRtZW50IiwiZW1haWwiOiJnam0tdGVzdC1jcmVhdGVhcHBvaW50bWVudC11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.MlK_mW25SmkV_So8PZxyRTs57xunEIpoOJ53qQtbndui4C97UtySe7qtqTb0w-bfmQUQGmMVNyDqUjTcbFZ5PKjy9CJoYaX2XcE_TevmHMZTbH6r0K0LOO0ar2r7myjN46WSa_N_LBrblPZAtvXOMzAQEDrhToqiF_LLAEOCAJQXRGM9EgV1ArtEwnsSnZ2TDk5lZfNk-a5pkyuHHVvtY3DPt1TMqns4ZBpffZ_PCkpmYWQpp48y2LsO0ej6vIdfYvmFo8AfVznKHWT7EKiY5cQPp7xJQ7L2IckULj3ClB2ife9gyEOLrHGiACJobjmGZVY8pri70ezy2y5Dn-4-hw"
		},
		{
			"key": "bearer_createappointment_expiry_date",
			"value": "2021-03-23T08:52:39.869Z"
		},
		{
			"key": "validate_createappointment_location_header",
			"value": "localhost:3000/appointments/Hdo7w"
		},
		{
			"key": "validate_createappointment_id",
			"value": "e1746233-a783-44e8-809d-5a7b7aa70879"
		},
		{
			"key": "validate_createappointment_link",
			"value": "Hdo7w"
		},
		{
			"key": "validate_createappointment_addition_1",
			"value": "addition_1"
		},
		{
			"key": "validate_createappointment_title",
			"value": "Investor Optimization Executive"
		},
		{
			"key": "validate_createappointment_location",
			"value": "East Tara"
		},
		{
			"key": "validate_createappointment_description",
			"value": "Vel voluptas iusto consequatur dolorum doloremque error cupiditate."
		},
		{
			"key": "validate_createappointment_date",
			"value": "2022-01-28T02:28+01:00"
		},
		{
			"key": "validate_createappointment_deadline",
			"value": "2020-04-20T09:58+02:00"
		},
		{
			"key": "validate_createappointment_hidden",
			"value": true
		},
		{
			"key": "validate_createappointment_driverAddition",
			"value": true
		},
		{
			"key": "validate_createappointment_addition_2",
			"value": "addition_2"
		},
		{
			"key": "bearer_getappointment",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk1NjYsImlhdCI6MTYxNjQ4OTI2NiwianRpIjoiZmNiOGFiNWMtZDQzYi00NjI4LWFlYjgtZDA2YWM4OTc4NDQzIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI5MDU1Y2YwMC0wOTExLTQzMTEtOWYzZS1jMzgxM2RkNGU0ZjkiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjgxYzcxYjUwLTc3ZDgtNDJjNS05NjU0LWUyZTY4NzhmN2I0OCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIEdldEFwcG9pbnRtZW50IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtZ2V0YXBwb2ludG1lbnQtdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6IkdldEFwcG9pbnRtZW50IiwiZW1haWwiOiJnam0tdGVzdC1nZXRhcHBvaW50bWVudC11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.LqYEt-2sEo-nvvdUD-I-uhn0qHs8KzmBBLTdTpM-LQ3lFc3Q1WNmJ7PtgjvmpMsx22xtais-Qtqa1x5M6bmddsvaBIkNDHyhJ7D3mYS-3OOb5sVimeAbZ9-tSotJouoDTdwMaPnb0XEi00tPEKLfy5X1Ztm67E9BaeauohhOit-5cXBwdDy5960lmjtTPffuEwo7E040eb3K39oT1wrd76x_F2hDM1XrM29PkgHmd8kHE8o5MNOIOaprjJsopkvQCI9ddoeTj2Ie3AGZtZbyOZN__Pn2u40tih8PUKkPTN8zdRKASw4pD3ctkWbhg0GXof7-ODSWA_CbMYwrPW-OKw"
		},
		{
			"key": "bearer_getappointment_expiry_date",
			"value": "2021-03-23T08:52:46.559Z"
		},
		{
			"key": "bearer_getappointment-admin",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk1NjcsImlhdCI6MTYxNjQ4OTI2NywianRpIjoiYjg4YTYyOGMtMjQ3NS00ZGE4LWFhMzUtNjNlOWFmMjYwNjY5IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI1MWE3ZmIxOC0xZjQ0LTRkMTMtYWUzMC1kNWUyN2QyNjIxZTAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6ImZjOThlMzUwLWNjM2MtNDg3MS1hODM2LWU5YTQ3Y2FmNGJlMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIEdldEFwcG9pbnRtZW50LUFkbWluIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtZ2V0YXBwb2ludG1lbnQtYWRtaW4tdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6IkdldEFwcG9pbnRtZW50LUFkbWluIiwiZW1haWwiOiJnam0tdGVzdC1nZXRhcHBvaW50bWVudC1hZG1pbi11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.QRO1QT-Q-SnVL7eudfMYuEA-vAUrjRCcDgB8ifh1OWlw_3eUo8hbUHVFhBUGSXwT_LmEjtEut4eOJxj5Ggssa_MFIAKuoMlwOVPKx1daQ_grMilLKjZ2-eBQOwsmcIhWqJFR4iHVdRPlVqKWn3paRS7BayVR3vUajIyWfirDpeJVHi-XKpRaRLelWDl5C9lBIxqthJI-tFpwaplSmIM7WPFX2MgOk_7mGzLeNs2JqEsWtUirIPNNOYHGYo106xYFT3mGdCtcHX6NOXhAdVT1DI7384Q53DQhTIaItXhokvmHxyxDpSitU3zQ6wU800jcoZ_31w1auvRQLIaxLtKwyQ"
		},
		{
			"key": "bearer_getappointment-admin_expiry_date",
			"value": "2021-03-23T08:52:47.212Z"
		},
		{
			"key": "bearer_getappointment-enrollmentcreator",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk1NjksImlhdCI6MTYxNjQ4OTI2OSwianRpIjoiZjY1NzY0NDgtMDA2MS00YWQ3LWIyMDAtNDY1MzJkYTg2YTM0IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIwZjcyZjk2NC1hMGIyLTQzNDctOWU1Mi05ZDJjZDI0NDE4NDkiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjVjNmIyMzk0LTFjMjktNDEwMC04NmIyLTg5Mjc1Y2NhMTQyNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIEdldEFwcG9pbnRtZW50LUVucm9sbG1lbnRDcmVhdG9yIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtZ2V0YXBwb2ludG1lbnQtZW5yb2xsbWVudGNyZWF0b3ItdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6IkdldEFwcG9pbnRtZW50LUVucm9sbG1lbnRDcmVhdG9yIiwiZW1haWwiOiJnam0tdGVzdC1nZXRhcHBvaW50bWVudC1lbnJvbGxtZW50Y3JlYXRvci11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.YxXK-mwSMA8ARP41teVUEkFaAM2ZHHM3WUdzxDa__xP302SyjC2zgbwrkiaIbspKDxrr-OKmRB_ISUACnHjFlrOg87J4fsrpYoDQhxG_3Ra561XsyVqIK7jwcQIK2oXFFYE-PkDcAUdClKhh8xRcFvWdHlz3zup_Y1G8X8IV9lVEDWvUkg368yEQp6YB45uxcaL0q2C7tyLcTz4Pz3IxUQcZM_gYh5LDUFOhve3LvxuCfTC4Q6MFmpaA8oukl4-lYL67Z0W7JhwOvd6diom9pngbQgerv8ujfpVYcaaKd5HQM4FFRz5jVNREMzMAXUKjp7dRlPh3EXsCRQdSXOkOfg"
		},
		{
			"key": "bearer_getappointment-enrollmentcreator_expiry_date",
			"value": "2021-03-23T08:52:49.083Z"
		},
		{
			"key": "bearer_getappointment-pinner",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk1NzAsImlhdCI6MTYxNjQ4OTI3MCwianRpIjoiYzVjODMwNGItZGVmZi00MGM2LWE2OTUtY2EyOWQ1N2YzOWU4IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIxNzFiY2I1MS1jMWM5LTQ3MGYtOGUwYi05YjM2YzAzZWZjYmQiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6ImMzNGU5NzNmLWRjMDItNDIwMy05NDUxLWNjNGUwMzhiMDUwYyIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIEdldEFwcG9pbnRtZW50LVBpbm5lciIsInByZWZlcnJlZF91c2VybmFtZSI6ImdqbS10ZXN0LWdldGFwcG9pbnRtZW50LXBpbm5lci11c2VyIiwiZ2l2ZW5fbmFtZSI6IkdKTS1UZXN0VXNlciIsImZhbWlseV9uYW1lIjoiR2V0QXBwb2ludG1lbnQtUGlubmVyIiwiZW1haWwiOiJnam0tdGVzdC1nZXRhcHBvaW50bWVudC1waW5uZXItdXNlckB0ZXN0aW5nLmdvLWpvaW4ubWUifQ.Y9GytlMCgIiJL_iPTfvl6WM1x0xe_s3hh0CCaDBfwXoNn9HIGAffQkxeDF3OTdI9o_ctfDDF1LFy67moajLY87gn2sdpIhMUB8lTa75TSLCUnKm6RZyuzK7VTo19tEmp4sCE5Ojd-4PumraXmhGslZUOQ-hx4Dc0jSgI3l0Kvb_LK1gWzaSIjRAzbD4lda04qRGSRLcDxJgR5_vfQvBMjPk8Gr6oLpQwX-dws5L4Y1OzMZfxpPOXot37S-boIFwQyrJmpOScai8Ei59Hiblpjg46zsjusqYFUYMfsictKZWaMOAiPIiwJac8Bt7jtq8yXDzHEY925TBfJHeemXe6Cw"
		},
		{
			"key": "bearer_getappointment-pinner_expiry_date",
			"value": "2021-03-23T08:52:50.022Z"
		},
		{
			"key": "bearer_updateappointment",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk1NzYsImlhdCI6MTYxNjQ4OTI3NiwianRpIjoiNjVmZDMxOTItNjYyMC00NGIxLWIyYTItNWE2YmZmOGFhZWI2IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIxZWVhZTIzNy0xYmFmLTRlNzktOWQ0Ni04NWY2MzU0YWE1MjEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjUwMWY1ZWNiLTBmNjctNDc0My1iZGE3LTI4NjhkNDc3MjM3YiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIFVwZGF0ZUFwcG9pbnRtZW50IiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtdXBkYXRlYXBwb2ludG1lbnQtdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6IlVwZGF0ZUFwcG9pbnRtZW50IiwiZW1haWwiOiJnam0tdGVzdC11cGRhdGVhcHBvaW50bWVudC11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.iR-daG4eVd5ZB2ezfTZd4qs1UL8HJIpIApvgYMlrcgr6xw9SAZT2vISRqNqengiwNi6C_rRReo9ZQ475j7J2cWzakGopJJQpxfkLSOjFgj9Nb8qlcNT2x2Nlig-R4yv2mZJEFFv-z2tsrNLIgB1abXPL7Kh95fdFf5af61yMnzWdROp1MTlSECYlX79aeSILW3Y8eL2by9ClSEu0u-DtG-ytldsiiMTDK2SRZ_6dtNk3WYBrz2g0ddOwE_yd5nHDhM7Tz2EGEa6Z9cn04PWBS0HL7IY9Fq3SUiLoVL3YD9aa_pMO-9N2VqZ7LrAYf98JL7rHjpy0dQciXQLMBephvw"
		},
		{
			"key": "bearer_updateappointment_expiry_date",
			"value": "2021-03-23T08:52:56.449Z"
		},
		{
			"key": "validate_updateappointment_link",
			"value": "FbLiz"
		},
		{
			"key": "validate_updateappointment_title",
			"value": "Investor Accountability Facilitator"
		},
		{
			"key": "validate_updateappointment_description",
			"value": "Quia et vero eius ab."
		},
		{
			"key": "validate_updateappointment_location",
			"value": "Anibalshire"
		},
		{
			"key": "validate_updateappointment_location_header",
			"value": "localhost:3000/appointments/test-updateappointment-link"
		},
		{
			"key": "prep_updateappointment_link",
			"value": "FbLiz"
		},
		{
			"key": "validate_updateappointment_link_header",
			"value": "localhost:3000/appointments/eL3Sk"
		},
		{
			"key": "prep_appointment_update_link_new",
			"value": "{{$randomPassword}}"
		},
		{
			"key": "prep_appointment_update_link",
			"value": "{{$randomPassword}}"
		},
		{
			"key": "verify_updateappointment_link_original",
			"value": "6cvPn"
		},
		{
			"key": "validate_updateappointment_link_original",
			"value": "6bJiW"
		},
		{
			"key": "validate_updateappointment_addition_1",
			"value": "primary"
		},
		{
			"key": "validate_updateappointment_addition_2",
			"value": "compress"
		},
		{
			"key": "prep_updateappointment_location_header",
			"value": "localhost:3000/appointments/FbLiz"
		},
		{
			"key": "prep_updateappointment_id",
			"value": "1d2fe82a-95b1-4340-af59-198562ac529b"
		},
		{
			"key": "prep_updateappointment_addition_1",
			"value": "addition_1"
		},
		{
			"key": "prep_updateappointment_addition_2",
			"value": "addition_2"
		},
		{
			"key": "prep_updateappointment_addition_3",
			"value": "addition_3"
		},
		{
			"key": "prep_updateappointment_addition_4",
			"value": "addition_4"
		},
		{
			"key": "prep_updateappointment_addition_5",
			"value": "addition_5"
		},
		{
			"key": "prep_updateappointment_addition_6",
			"value": "addition_6"
		},
		{
			"key": "prep_updateappointment_addition_1_id",
			"value": "79cc166a-2fb9-4c8d-b1f6-fc8e9bef0baa"
		},
		{
			"key": "prep_updateappointment_addition_2_id",
			"value": "9b9980e5-96d3-4cc8-b44f-fdb603414e5d"
		},
		{
			"key": "prep_updateappointment_addition_3_id",
			"value": "875380a8-25ba-41df-8a89-60e2ee5ce27a"
		},
		{
			"key": "prep_updateappointment_addition_4_id",
			"value": "c27e573f-ea00-4c48-9db6-3e7167788e2a"
		},
		{
			"key": "prep_updateappointment_addition_5_id",
			"value": "d993c98e-ff2f-4024-a49b-419dc1cb1eeb"
		},
		{
			"key": "prep_updateappointment_addition_6_id",
			"value": "8def9458-0462-4453-b518-c75e00f94cb6"
		},
		{
			"key": "VALIDATION_appointment_creation_location_header",
			"value": "localhost:3000/appointments/PFYt4"
		},
		{
			"key": "VALIDATION_appointment_creation_id",
			"value": "b9073065-8a55-4c4d-925c-45746b4955bb"
		},
		{
			"key": "VALIDATION_appointment_creation_link",
			"value": "PFYt4"
		},
		{
			"key": "VALIDATION_appointment_creation_title",
			"value": "test-POSTMAN-createappointment-title-Lead Operations Manager"
		},
		{
			"key": "VALIDATION_appointment_creation_location",
			"value": "test-POSTMAN-createappointment-location-West Therese"
		},
		{
			"key": "VALIDATION_appointment_creation_description",
			"value": "test-POSTMAN-createappointment-description-Animi in modi delectus est ut aut ut eaque."
		},
		{
			"key": "VALIDATION_appointment_creation_date",
			"value": "2022-03-05T09:57+01:00"
		},
		{
			"key": "VALIDATION_appointment_creation_deadline",
			"value": "2020-04-10T08:30+02:00"
		},
		{
			"key": "VALIDATION_appointment_creation_driverAddition",
			"value": true
		},
		{
			"key": "VALIDATION_appointment_creation_addition_1_name",
			"value": "test-POSTMAN-createappointment-addition-1-name"
		},
		{
			"key": "VALIDATION_appointment_creation_addition_2_name",
			"value": "test-POSTMAN-createappointment-addition-2-name"
		},
		{
			"key": "VALIDATION_appointment_update_location_header",
			"value": "localhost:3000/appointments/test-updateappointment-link"
		},
		{
			"key": "VALIDATION_appointment_update_title",
			"value": "test-POSTMAN-appointmentupdate-title-new-Corporate Web Coordinator"
		},
		{
			"key": "VALIDATION_appointment_update_description",
			"value": "test-POSTMAN-appointmentupdate-description-new-Nihil aperiam qui voluptas vel sed."
		},
		{
			"key": "VALIDATION_appointment_update_location",
			"value": "test-POSTMAN-appointmentupdate-location-new-Moenfort"
		},
		{
			"key": "PREPARE_appointment_update_link",
			"value": "test-POSTMAN-appointmentupdate-link-link-new-9nA1yoGnIhTxHkl"
		},
		{
			"key": "VALIDATION_appointment_update_link_original",
			"value": "YieU2"
		},
		{
			"key": "VALIDATION_appointment_update_link_header",
			"value": "localhost:3000/appointments/test-updateappointment-hidden-link"
		},
		{
			"key": "VALIDATION_appointment_update_link",
			"value": "FbLiz"
		},
		{
			"key": "PREPARATION_appointment_update_link",
			"value": "yhaWX"
		},
		{
			"key": "VALIDATION_appointment_update_addition_1_name",
			"value": "test-POSTMAN-appointmentupdate-additions-addition-1-new-name-structure"
		},
		{
			"key": "VALIDATION_appointment_update_addition_2_name",
			"value": "test-POSTMAN-appointmentupdate-additions-addition-2-new-name-Bedfordshire"
		},
		{
			"key": "PREPARATION_appointment_update_location_header",
			"value": "localhost:3000/appointments/yhaWX"
		},
		{
			"key": "PREPARATION_appointment_update_id",
			"value": "e77240cd-2e38-4bd6-9fd3-1eb00ebf77b1"
		},
		{
			"key": "PREPARATION_appointment_update_addition_1",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-1-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_2",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-2-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_3",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-3-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_4",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-4-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_5",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-5-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_6",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-6-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_1_id",
			"value": "58955033-d449-40c8-8a3f-53203663fbcf"
		},
		{
			"key": "PREPARATION_appointment_update_addition_2_id",
			"value": "f0158c09-589d-4e2e-af12-7898fae7f6ab"
		},
		{
			"key": "PREPARATION_appointment_update_addition_3_id",
			"value": "2dadcfb6-dfa5-49e8-aa2e-1b6ad1ccb65d"
		},
		{
			"key": "PREPARATION_appointment_update_addition_4_id",
			"value": "603cb346-e00e-4a09-aa1a-c435531542cc"
		},
		{
			"key": "PREPARATION_appointment_update_addition_5_id",
			"value": "a7e6c0dd-a425-4c6d-bc7b-a310065724dd"
		},
		{
			"key": "PREPARATION_appointment_update_addition_6_id",
			"value": "2ca28b41-38e0-4356-ad58-491d36e38683"
		},
		{
			"key": "PREPARATION_appointment_update_addition_1_name",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-1-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_2_name",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-2-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_3_name",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-3-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_4_name",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-4-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_5_name",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-5-name"
		},
		{
			"key": "PREPARATION_appointment_update_addition_6_name",
			"value": "test-POSTMAN-PREPARATION-updateappointment-additions-addition-6-name"
		},
		{
			"key": "VALIDATION_appointment_update_date",
			"value": "2021-05-01 10:05:23"
		},
		{
			"key": "VALIDATION_appointment_update_deadline",
			"value": "2020-12-30 10:05:23"
		},
		{
			"key": "RESET_appointment_update_link_header",
			"value": "localhost:3000/appointments/test-updateappointment-hidden-link"
		},
		{
			"key": "bearer_manageadministrators",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk1ODcsImlhdCI6MTYxNjQ4OTI4NywianRpIjoiNTAzNTgyN2QtZDcyNi00MjczLTg2NjctMjk2Mzk0N2JiYjQ3IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJhNjdjZmNjMS0xMGFlLTQyMDAtYTA2ZS1lM2JhOTM5NTM2NjMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6ImFhYzhjYTk2LTMxZGQtNDNmMS1hYWU2LWM0NTZjYWY1MTBiNCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIE1hbmFnZUFkbWluaXN0cmF0b3JzIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtbWFuYWdlYWRtaW5pc3RyYXRvcnMtdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6Ik1hbmFnZUFkbWluaXN0cmF0b3JzIiwiZW1haWwiOiJnam0tdGVzdC1tYW5hZ2VhZG1pbmlzdHJhdG9ycy11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.iaPUvp3R_Gyo9T6cifIVsF5Hh4US2QH45DxwF8gDepDGUNchZldfqVKJ6BssUxe-2rDFBwzTiMlDLnlqi083bS784yZJV84mrlEWkhrXLTHJxHP5wudElVTt-BObTHSa5ErV2E9yiTAyF6IWUD8RfFTa8KsaPi4ecF_n82wLz5j-fH5qLJH0EApRPC29nJUkmkxnaenR5OiFPdlpcS1TnWTxbrWbOwdpZiPiiJDdvTMTSBUyjK5KCuXm-EjVGKuqzwiA-CsneudghwjPKf_4GlaY5x-NeJSiDc8cvBYtKVxd5qGCDDEkix7pSV00wfkeAVhSQt5vncc3uoowpCbphQ"
		},
		{
			"key": "bearer_manageadministrators_expiry_date",
			"value": "2021-03-23T08:53:07.249Z"
		},
		{
			"key": "PREPARATION_appointment_administrators_link",
			"value": "b3d1r"
		},
		{
			"key": "VALIDATION_appointment_adminsitrators_administrator_username",
			"value": "gjm-test-manageadministrators-admin-user"
		},
		{
			"key": "bearer_manageadministrators-admin",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk1ODgsImlhdCI6MTYxNjQ4OTI4OCwianRpIjoiYWQ4ZDBlM2ItNzA1My00OTNiLTk3ZTQtODBmYzY1MWM4OWNmIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIxNjE2N2UwMC04OTk4LTRhOTUtYTI0YS1iNDVhMGE1YzM3YzUiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjEyYzc4NzdiLTk1YzgtNDRjNS1iZjI1LTQ1YmZhNzQyZWI4ZCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIE1hbmFnZUFkbWluaXN0cmF0b3JzLUFkbWluIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtbWFuYWdlYWRtaW5pc3RyYXRvcnMtYWRtaW4tdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6Ik1hbmFnZUFkbWluaXN0cmF0b3JzLUFkbWluIiwiZW1haWwiOiJnam0tdGVzdC1tYW5hZ2VhZG1pbmlzdHJhdG9ycy1hZG1pbi11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.K8GXA3ncE8wA00fPqEA9tB-lKef6mGAWZ7uhib580JMqQkM7kDvuEbYjFFYOL5TOfG7sMZOz0lIqjjK6mneAPWzDfCjnpLaXemIKsEJvCuGvNS5zt5l7Q2SuC0YAl-q-tjXYglqJ55TDgn_cMkRQ0-comECLVx75ABxHuJ9OkH9OOqHu8UhkfEdJy6hWSTpGewwgnoX7skf9UdPsFttvNOTw084G5NRii5LpCPoiLyxaSlTr4zk9RRaFsFBzW9pyklf_yhCRCJ-EaHZacQZR3YQBtDdKj1DBsPKM3CHkvj5QcMxWyCrrWIQ_fB1f1s3dXtWosifeuQMuOFAKWE8CVg"
		},
		{
			"key": "bearer_manageadministrators-admin_expiry_date",
			"value": "2021-03-23T08:53:08.469Z"
		},
		{
			"key": "VALIDATION_enrollment_creation_location_header",
			"value": "localhost:3000/enrollments/daa54f33-f3eb-421e-8005-ef3590eabab9"
		},
		{
			"key": "VALIDATION_enrollment_creation_id",
			"value": "cac2d27e-131d-4054-97ec-40f167f831a8"
		},
		{
			"key": "VALIDATION_enrollment_creation_token",
			"value": "31271ecedaa25392994ca760e6fdbd008463a0a635725d29b5b76b41c2b1251b"
		},
		{
			"key": "VALIDATION_enrollment_creation_name",
			"value": "Leonor.Kunde"
		},
		{
			"key": "VALIDATION_enrollment_creation_appointment_link",
			"value": "3SFg2"
		},
		{
			"key": "VALIDATION_enrollment_creation_comment",
			"value": "                      copying the bandwidth won't do anything, we need to quantify the multi-byte SQL firewall!                      "
		},
		{
			"key": "bearer_createenrollment-enrollmentcreator",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk1OTUsImlhdCI6MTYxNjQ4OTI5NSwianRpIjoiMzRiNjk3YTgtNTUzYi00MjUyLTg5OGQtMmUzYjUzMzMxODY1IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI1MjhjOTdjYi00ZWI4LTQxMGYtYTM4Yy1kZjU0NDgxOWFmMjgiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjEzZDE0OGI5LTkwOWUtNDkyYS05NWE1LTA0ZWFkNzc4NWRkMSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIENyZWF0ZUVucm9sbG1lbnQtRW5yb2xsbWVudENyZWF0b3IiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJnam0tdGVzdC1jcmVhdGVlbnJvbGxtZW50LWVucm9sbG1lbnRjcmVhdG9yLXVzZXIiLCJnaXZlbl9uYW1lIjoiR0pNLVRlc3RVc2VyIiwiZmFtaWx5X25hbWUiOiJDcmVhdGVFbnJvbGxtZW50LUVucm9sbG1lbnRDcmVhdG9yIiwiZW1haWwiOiJnam0tdGVzdC1jcmVhdGVlbnJvbGxtZW50LWVucm9sbG1lbnRjcmVhdG9yLXVzZXJAdGVzdGluZy5nby1qb2luLm1lIn0.cNxvVjv2VYEQ867p0TGGRdq7mBeJYsMc_DxKBWZRhjdexGCBj9GtxVeenXjm96YR3f8Tt_xzQiYT2YibqpJ01aSuBvDLxZpW9trHvhD9OQsuR5Np6Dk-MTQioVXx2zXsd4svrFERKGCXIS2Tf5eLmsoFzyah0dNLD16AEzglvbdBt_ysmhVDSNLEqgXG6YienzxU-stswTtoNts__EVC1fQe49LbOH342-mNywNej_MrxYkL1sV9fU7g3iHVORZGFCUJZzP51UazfGd5fDveTNN_Uh7OOTZnTjzHg80npj8Fafm1TS4lsp2PqsVgrFWUX_d4DSxCREclGw6gay6u_w"
		},
		{
			"key": "bearer_createenrollment-enrollmentcreator_expiry_date",
			"value": "2021-03-23T08:53:15.271Z"
		},
		{
			"key": "PREPARATION_enrollment_creation_appointment_link",
			"value": "3SFg2"
		},
		{
			"key": "VALIDATION_enrollment_creation_addition_1_id",
			"value": "626cceb8-916f-4132-b035-ce8eb8403510"
		},
		{
			"key": "VALIDATION_enrollment_creation_addition_1_name",
			"value": "test-createenrollment-additions-name-1"
		},
		{
			"key": "VALIDATION_enrollment_creation_addition_2_id",
			"value": "b190aa03-72d1-4687-8579-0fed36aa78a4"
		},
		{
			"key": "VALIDATION_enrollment_creation_addition_2_name",
			"value": "test-createenrollment-additions-name-2"
		},
		{
			"key": "VALIDATION_enrollment_creation_addition_3_id",
			"value": "c96e5fe9-a648-4171-92d4-9c7e96c8ccbf"
		},
		{
			"key": "VALIDATION_enrollment_creation_addition_4_name",
			"value": "test-createenrollment-additions-name-4"
		},
		{
			"key": "VALIDATION_enrollment_creation_addition_3_name",
			"value": "test-createenrollment-additions-name-3"
		},
		{
			"key": "VALIDATION_enrollment_creation_addition_4_id",
			"value": "e828a2bc-8f00-4926-affc-5dc98b322f12"
		},
		{
			"key": "VALIDATION_enrollment_creation_driver_service",
			"value": "1"
		},
		{
			"key": "VALIDATION_enrollment_creation_driver_seats",
			"value": "4"
		},
		{
			"key": "VALIDATION_enrollment_creation_passenger_requirement",
			"value": "1"
		},
		{
			"key": "bearer_enrollmentpermission-enrollmentcreator",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk2MDgsImlhdCI6MTYxNjQ4OTMwOCwianRpIjoiMTkzMzg3YTEtN2NkYi00ZjlkLWEwZTUtMTc0YjRhYzA2ZDdjIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI1MzUyN2ZiNi1mNTkxLTQyOTQtYmEwYy1mMWI1YzdhYzUwZjEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6ImM5NzUyYmRjLTE0MTYtNDNkYy1iNzE4LWM2NDc5Yjc2ZDMzOSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIEVucm9sbG1lbnRQZXJtaXNzaW9uLUVucm9sbG1lbnRDcmVhdG9yIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtZW5yb2xsbWVudHBlcm1pc3Npb24tZW5yb2xsbWVudGNyZWF0b3ItdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6IkVucm9sbG1lbnRQZXJtaXNzaW9uLUVucm9sbG1lbnRDcmVhdG9yIiwiZW1haWwiOiJnam0tdGVzdC1lbnJvbGxtZW50cGVybWlzc2lvbi1lbnJvbGxtZW50Y3JlYXRvci11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.gTudVQLJ7FxOTmqM3cEqRIpoKDlH1b5LmUfB5vd_VAz9BgLXaIRDnyjgeDl4r9wWVzqop9ewEJ2R9042YVL8btaMhZ-dJu5ae0j1KtTDxk8TI8jTyUsflVEzpK0MoyP9uugKQO9ei_nUJ66whw1iIbZUVJWmQM21aO2rjcr9MUQWxCTZNNpJgB9sb-BEhwju_nARaxFWqKhQvlnPvgVwjQcix09ltG6FD7BwDhv-Du8qRp5k4_s8UoMY0IatkQ2JOM3TheSRALGw1I0paxb6Y4PN9-shk0gPp9_phBelJOmyfNdfRLAYze07A0tLTd61s67kCiCQGeq5sFTIRoZH5Q"
		},
		{
			"key": "bearer_enrollmentpermission-enrollmentcreator_expiry_date",
			"value": "2021-03-23T08:53:28.764Z"
		},
		{
			"key": "bearer_enrollmentpermission-appointmentcreator",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk2MDcsImlhdCI6MTYxNjQ4OTMwNywianRpIjoiNmFiNmIyZmYtMDNkNi00MWE3LWI3MmEtYTYxMDg1NDY4Zjk5IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiIzMDgxNWM5Ny0zN2Y3LTQ1NDctYTg2My05ZjcwZTRjZDIzNDgiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjY0MTcyMGY1LWVlNWItNGU4ZS1hNDg0LTFhMTQ3MjMyOTBkMyIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIEVucm9sbG1lbnRQZXJtaXNzaW9uLUFwcG9pbnRtZW50Q3JlYXRvciIsInByZWZlcnJlZF91c2VybmFtZSI6ImdqbS10ZXN0LWVucm9sbG1lbnRwZXJtaXNzaW9uLWFwcG9pbnRtZW50Y3JlYXRvci11c2VyIiwiZ2l2ZW5fbmFtZSI6IkdKTS1UZXN0VXNlciIsImZhbWlseV9uYW1lIjoiRW5yb2xsbWVudFBlcm1pc3Npb24tQXBwb2ludG1lbnRDcmVhdG9yIiwiZW1haWwiOiJnam0tdGVzdC1lbnJvbGxtZW50cGVybWlzc2lvbi1hcHBvaW50bWVudGNyZWF0b3ItdXNlckB0ZXN0aW5nLmdvLWpvaW4ubWUifQ.geQeCcWyhZax1oOFIhPdJns1_XMWjG_YL2JV5H7cYaSL3KvSDn22RPaLtDiB4XBdmCl7BP0QdRydiX32HhnoboCluYVbklZ7Nn8Q7HVK4f4I99ejJeIS4fsahJhC7vvnibUpF2XzpKvCzNY0TFuBO0okbXjQ7FrwG7bTg4U-8EKAWGvZ7F_tzNmfr7qm3DnVYv6c31DQoJHmvSi22s4ptxistM95MCao2tWz2cMXP3Z7EM32X1hQcdtG3e3xpDjZtiBeIb3DLHn63n8w77W0Pl997mMIjSMi-zZYB4rdstNX2H3YAmz5Nd1UnRCH9WAIl8gsrM38et04hRYQxVUOrg"
		},
		{
			"key": "bearer_enrollmentpermission-appointmentcreator_expiry_date",
			"value": "2021-03-23T08:53:27.332Z"
		},
		{
			"key": "bearer_enrollmentpermission-appointmentadmin",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk2MDgsImlhdCI6MTYxNjQ4OTMwOCwianRpIjoiZGJiY2QwM2MtNTBjOC00YTVkLTkyYzQtYjZlZTAwM2M3MTQ3IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJiZWZiMjZiMi04Y2JmLTQ2NDEtYjlhZi1kOGZiYTE4OWFjMGEiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjJkMjYzOGE2LTgwZWYtNDRiNy04Y2QyLThlNmQ2ZmJlODcxZSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIEVucm9sbG1lbnRQZXJtaXNzaW9uLUFwcG9pbnRtZW50QWRtaW4iLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJnam0tdGVzdC1lbnJvbGxtZW50cGVybWlzc2lvbi1hcHBvaW50bWVudGFkbWluLXVzZXIiLCJnaXZlbl9uYW1lIjoiR0pNLVRlc3RVc2VyIiwiZmFtaWx5X25hbWUiOiJFbnJvbGxtZW50UGVybWlzc2lvbi1BcHBvaW50bWVudEFkbWluIiwiZW1haWwiOiJnam0tdGVzdC1lbnJvbGxtZW50cGVybWlzc2lvbi1hcHBvaW50bWVudGFkbWluLXVzZXJAdGVzdGluZy5nby1qb2luLm1lIn0.E15DcRt5AwNCbfPV5mEgt1JfSCZvopaXLycOHGUtxbrR5cNsZf8reIKQ9zmzoc1piDN0uH3GimMaZW2fWRO3v9PMx6LTgpCKr3zQLoOH98j56F2Lo126Q8Y3lmM-u1qsbZ3Wou88yro6anErKf4FKhnpQWzmqbjn-A4Z38eJ35HOTRAevJxPuQOyqz2-lAz-I6TFtdxakJIE-ZGlS3TT2Y1-ZYXsPhz_XQPMxah_A7QU_gdFyN_H48u2TJt4u0JgwPL6pPlTJ_2vkmEVaZZogwcFAtxqGzmIG6Pew_Dy3siTU293ytC_9WU6Ln_AvH_rRkTPafDaY6VNP2KARY7PaA"
		},
		{
			"key": "bearer_enrollmentpermission-appointmentadmi_expiry_date",
			"value": "2021-03-23T08:53:28.079Z"
		},
		{
			"key": "bearer_enrollmentpermission-appointmentadmin_expiry_date",
			"value": "2021-03-21T21:01:58.630Z"
		},
		{
			"key": "bearer_enrollmentpermission-regularuser",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk2MDksImlhdCI6MTYxNjQ4OTMwOSwianRpIjoiMzNmNjY4MWMtMjU3NS00ZDg0LWJjNmYtMGQ3MDgxMTYzMGY0IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI3MGNjYjJkZi1mNTQzLTQ5YWMtOWVkNy0yMDVlOTgxMTczZDgiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6ImIzOGI0NTlhLWNmZjMtNGQxYi1iMDExLWY2NjIwN2M0NjdhNCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIEVucm9sbG1lbnRQZXJtaXNzaW9uLVJlZ3VsYXJVc2VyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtZW5yb2xsbWVudHBlcm1pc3Npb24tcmVndWxhcnVzZXItdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6IkVucm9sbG1lbnRQZXJtaXNzaW9uLVJlZ3VsYXJVc2VyIiwiZW1haWwiOiJnam0tdGVzdC1lbnJvbGxtZW50cGVybWlzc2lvbi1yZWd1bGFydXNlci11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.C36y19-gAwWp6WEI1h-4thQwGHZj0w5Qh1nfTuLrHp155hLqFQGZ136VWWHwtqqKjihXrtErKpaQAxi2Bc2y7ueN1hbRWs_2F1ip4JdZ4qssY2b7XYONjns9BDYvh07uvKtO_d9DAPaHQk6pWmXftm0rpghnkTOu6pHDydnvAqI1WBokbX9tWFDjHlAl6KzgY6Lr62EurdX2Aq6qnhCmSAujIdcW--06IrAgOjveClo9BVyMfqq6ddHBmqmzgPlDoSeJ4gEJvNkRBkyon8f2OU0Vi_CvNufaogdsKlCf6MNpq6n1eaLKJjE-A-5qlwQuqfF0HBt5fBK-HVgSd_Hteg"
		},
		{
			"key": "bearer_enrollmentpermission-regularuser_expiry_date",
			"value": "2021-03-23T08:53:29.501Z"
		},
		{
			"key": "bearer_updateenrollment-enrollmentcreator",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk2MDAsImlhdCI6MTYxNjQ4OTMwMCwianRpIjoiNjgxMzFiZTMtMWZkNi00ODg1LTg5ZTEtNmZlN2JmMzYyYjczIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI2OWY4MWU2NC0zMWM5LTRiOTctYTAzYi1kMGI5ODI2OGU0NmMiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6ImY0ZGRjNGI3LWI1ODgtNDVlZi05MTE5LTMxMDljNGU5NDg4MiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIFVwZGF0ZUVucm9sbG1lbnQtRW5yb2xsbWVudENyZWF0b3IiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJnam0tdGVzdC11cGRhdGVlbnJvbGxtZW50LWVucm9sbG1lbnRjcmVhdG9yLXVzZXIiLCJnaXZlbl9uYW1lIjoiR0pNLVRlc3RVc2VyIiwiZmFtaWx5X25hbWUiOiJVcGRhdGVFbnJvbGxtZW50LUVucm9sbG1lbnRDcmVhdG9yIiwiZW1haWwiOiJnam0tdGVzdC11cGRhdGVlbnJvbGxtZW50LWVucm9sbG1lbnRjcmVhdG9yLXVzZXJAdGVzdGluZy5nby1qb2luLm1lIn0.Ch88FtbFV7OCVNpQPlL-HfvVvIP73Nks1TNbbwZfEl8rkop6EmTr9Jj44Czh52PCAzuFIYUWpZRlXP1Pn-Z_PpS_MZgmVcTcZNRvypVlFp6POZ6G7SI6mJBpTiYwZzg6CSvahmlhtCOtJN0o5cvm0a1dnB1QvThKGYdrrwEzb4aKr8PkNGiZCjPZnMmaU8Q3VijU9yxSxDkvTeVc4aU4ueyvXesIPdpklo-KsvrxaxaxbqNg5T-45iKzFDVF_9vVNWs71ipeo5S8aQKJLLmXKmXc0KRy2yMEQ2aW5EENpU83_06NiBJ0Uy025HQbYWU9bmGL6Nx1fxxEoZfhsdCzCw"
		},
		{
			"key": "bearer_updateenrollment-enrollmentcreator_expiry_date",
			"value": "2021-03-23T08:53:20.689Z"
		},
		{
			"key": "VALIDATION_enrollment_update_location_header",
			"value": null
		},
		{
			"key": "VALIDATION_enrollment_update_title_comment",
			"value": "parsing the hard drive won't do anything, we need to compress the primary SSL matrix!"
		},
		{
			"key": "VALIDATION_enrollment_update_comment",
			"value": "test-POSTMAN-enrollmentupdate-comment-new-You can't compress the interface without transmitting the bluetooth RAM interface!"
		},
		{
			"key": "bearer_updateenrollment-appointmentcreator",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY1MDkzOTMsImlhdCI6MTYxNjUwOTA5MywianRpIjoiYTAxZDg4ZDQtYjBjNy00ODg0LWE1NzAtMTRlMzdiNWJjMGU5IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiI3MjFhMTZmOC1kYjgyLTRmYTEtOWNiMy05NzAzMmNjMzNkYTYiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjIxZDQ5ODk5LTM2MjUtNGE0MS04NDJiLTNhNjY0YmJjZDgxZiIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIFVwZGF0ZUVucm9sbG1lbnQtQXBwb2ludG1lbnRDcmVhdG9yIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtdXBkYXRlZW5yb2xsbWVudC1hcHBvaW50bWVudGNyZWF0b3ItdXNlciIsImdpdmVuX25hbWUiOiJHSk0tVGVzdFVzZXIiLCJmYW1pbHlfbmFtZSI6IlVwZGF0ZUVucm9sbG1lbnQtQXBwb2ludG1lbnRDcmVhdG9yIiwiZW1haWwiOiJnam0tdGVzdC11cGRhdGVlbnJvbGxtZW50LWFwcG9pbnRtZW50Y3JlYXRvci11c2VyQHRlc3RpbmcuZ28tam9pbi5tZSJ9.AxgxmC-oECh2BFpiVu21fmovpyaQuH7-zohiNV7yUkTNQ4PrrxEYCAmCE1wk05q3f6nZ6mDRmwx8ZxnUHa6wINGGTFNm0-tl31fsHYdJaipTitd1q-h98uEG2n7iRFqfyBv80OAE3qYyAqB5IrIDHjq3amT6NcflDAYk50N6FTED-nEZvPR3cgj00BfveiilcNbSdk8mpEWLnYLsOMs1ilUboUWdWk3--9dP0U-1y8P4gBx-6AMRww9cdj6UkQ2azTm2qCNWPon4EuFwAvIlZBr3Xd77G-4Xuc8xKoeH-Z0tXfET0BDAnYrxIDPfZ1B13zmgU0ttqq-PXb6MnEPQtw"
		},
		{
			"key": "bearer_updateenrollment-appointmentcreator_expiry_date",
			"value": "2021-03-23T14:23:14.132Z"
		},
		{
			"key": "bearer_updateenrollment-appointmentadmin",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk2MDIsImlhdCI6MTYxNjQ4OTMwMiwianRpIjoiMWM0YzYyOGUtZDhiYS00MGMyLWJlZTAtNzc5MTE3NDM5Yzk3IiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJlZmE2NjY4Yy1iOTQ5LTQwODQtYWM5Ny1jYmY4MDIyNTExNzkiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6IjcwODlmZmY2LWYzYTUtNDFjNS04Mjk5LTVmYmEzMGY1Y2NmNCIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIFVwZGF0ZUVucm9sbG1lbnQtQXBwb2ludG1lbnRBZG1pbiIsInByZWZlcnJlZF91c2VybmFtZSI6ImdqbS10ZXN0LXVwZGF0ZWVucm9sbG1lbnQtYXBwb2ludG1lbnRhZG1pbi11c2VyIiwiZ2l2ZW5fbmFtZSI6IkdKTS1UZXN0VXNlciIsImZhbWlseV9uYW1lIjoiVXBkYXRlRW5yb2xsbWVudC1BcHBvaW50bWVudEFkbWluIiwiZW1haWwiOiJnam0tdGVzdC11cGRhdGVlbnJvbGxtZW50LWFwcG9pbnRtZW50YWRtaW4tdXNlckB0ZXN0aW5nLmdvLWpvaW4ubWUifQ.GhgDY6JhGS8HREaPd8fj69GO8bDVZfjff4wT8_OYYKvxhc9pxoiL2eNthmISPs6NxT3OTmhUV1Uc2DV3lc3265MT2TCGyzhPe-DvU8ibWt5OjpcQFUXpeWpn8oJ9F9NbDEi-8LXjhRbJob-vdGppCdnCZcsjwsr7JsjF6Y3UeggtUREiiezQmK4kwtEPA94DyKdoaSwWuA9ag0L-Q2QfrCKeKAKrPerTPjXNIHEOXkHFDs5HmQSY_DvFvglwW-F3g1lgg0Qm7JUVybK31rft_X-LlJhVXQG-yfmgx_sIjE6PW5s3wOaYI3nwyXvrwHPvPKn09JNX56sSfJzzhS4T7Q"
		},
		{
			"key": "bearer_updateenrollment-appointmentadmin_expiry_date",
			"value": "2021-03-23T08:53:22.133Z"
		},
		{
			"key": "bearer_updateenrollment-regularuser",
			"value": "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICJRTWxEMjdoQXB0UVpDNXRhclVSZ2s5bFRMSl9IUjNQOG5ZdEppTktZYThNIn0.eyJleHAiOjE2MTY0ODk2MDMsImlhdCI6MTYxNjQ4OTMwMywianRpIjoiMjg0Y2RhYWItMGQxNi00NzUzLThlNTAtYTM4YjhiMjk2ZjFlIiwiaXNzIjoiaHR0cHM6Ly9hY2NvdW50LnNlYmFtb21hbm4uZGUvYXV0aC9yZWFsbXMvdGVzdCIsImF1ZCI6ImFjY291bnQiLCJzdWIiOiJiMDM4Y2NhMy0wYTIzLTQzMTQtOWExMy0yMjE1M2YyYTRmNDAiLCJ0eXAiOiJCZWFyZXIiLCJhenAiOiJ0ZXN0Iiwic2Vzc2lvbl9zdGF0ZSI6ImY3YzJiMjI4LTY3YzUtNDY4Ni1iM2YyLTIxNzc1MTgzNTNiNSIsImFjciI6IjEiLCJhbGxvd2VkLW9yaWdpbnMiOlsiaHR0cHM6Ly9sb2NhbGhvc3Q6NDIwMCJdLCJyZWFsbV9hY2Nlc3MiOnsicm9sZXMiOlsib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoiZW1haWwgcHJvZmlsZSIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiR0pNLVRlc3RVc2VyIFVwZGF0ZUVudHJvbGxtZW50LVJlZ3VsYXJVc2VyIiwicHJlZmVycmVkX3VzZXJuYW1lIjoiZ2ptLXRlc3QtdXBkYXRlZW5yb2xsbWVudC1yZWd1bGFydXNlci11c2VyIiwiZ2l2ZW5fbmFtZSI6IkdKTS1UZXN0VXNlciIsImZhbWlseV9uYW1lIjoiVXBkYXRlRW50cm9sbG1lbnQtUmVndWxhclVzZXIiLCJlbWFpbCI6ImdqbS10ZXN0LXVwZGF0ZWVucm9sbG1lbnQtcmVndWxhcnVzZXItdXNlckB0ZXN0aW5nLmdvLWpvaW4ubWUifQ.YLvMaO9Lun-BuhQv2ItQyz3Bm-UetfL1CZZzCAIAFnASRbYCdPIb9urc-eEJxmjtlnM5wvmHGsh1M86gx_PuMKdhbh9_dqsqPXNNyMdWCWtUoRYWlE7o1lD7ahPO_D3en07fCpqOEWo2ZFJCXnXawQhQfwE17TIK4t1tM7omr_o83hWcHXIOHZM_sDhd86GDwoLXckOKmvXKuaoyGngCRNvn3z28tK14r-ozCPI96mV-aMtcITO9CIw0d6kli-R7Oihw_NJLk1f_VtHHTLGTEEtErir_EvFVqLQMtjnnxyNJMOODKjbgKhA6NkRbgMgOE-iANf27SiYuZmKpZzWcuQ"
		},
		{
			"key": "bearer_updateenrollment-regularuser_expiry_date",
			"value": "2021-03-23T08:53:23.613Z"
		},
		{
			"key": "VALIDATION_enrollment_update_name",
			"value": "test-POSTMAN-enrollmentupdate-name-new-Luisa50"
		},
		{
			"key": "PREPARATION_enrollment_creation_id",
			"value": "024b4593-7d75-474b-adc6-3d9525bbb624"
		},
		{
			"key": "PREPARATION_enrollment_creation_token",
			"value": "ca8a04352cf0ea9c22759bd16acb94ac1bde5ee10960010c0260f9c8f23f6fbd"
		},
		{
			"key": "VALIDATION_enrollment_update_additions_addition_1_name",
			"value": null
		},
		{
			"key": "VALIDATION_enrollment_update_additions_addition_2_name",
			"value": null
		},
		{
			"key": "bearer_managefiles",
			"value": ""
		},
		{
			"key": "bearer_managefiles_expiry_date",
			"value": ""
		},
		{
			"key": "PREPARATION_appointment_files_link",
			"value": ""
		},
		{
			"key": "VALIDATION_file_creation_location_header",
			"value": ""
		},
		{
			"key": "bearer_managefiles-admin",
			"value": ""
		},
		{
			"key": "bearer_managefiles-admin_expiry_date",
			"value": ""
		},
		{
			"key": "PREPARATION_file_creation_id_1",
			"value": ""
		},
		{
			"key": "PREPARATION_file_creation_id_2",
			"value": ""
		},
		{
			"key": "PREPARATION_appointment_pins_link",
			"value": ""
		},
		{
			"key": "bearer_pins",
			"value": ""
		},
		{
			"key": "bearer_pins_expiry_date",
			"value": ""
		},
		{
			"key": "bearer_updateappointment-admin",
			"value": ""
		},
		{
			"key": "bearer_updateappointment-admin_expiry_date",
			"value": ""
		},
		{
			"key": "bearer_appointment_managementrelations",
			"value": ""
		},
		{
			"key": "bearer_appointment_managementrelations_expiry_date",
			"value": ""
		},
		{
			"key": "bearer_appointment_managementrelations-admin",
			"value": ""
		},
		{
			"key": "bearer_appointment_managementrelations-admin_expiry_date",
			"value": ""
		},
		{
			"key": "bearer_appointment_managementrelations-regularuser",
			"value": ""
		},
		{
			"key": "bearer_appointment_managementrelations-regularuser_expiry_date",
			"value": ""
		},
		{
			"key": "bearer_getappointments",
			"value": ""
		},
		{
			"key": "bearer_getappointments_expiry_date",
			"value": ""
		},
		{
			"key": "bearer_getappointments-filter",
			"value": ""
		},
		{
			"key": "bearer_getappointments-filter_expiry_date",
			"value": ""
		},
		{
			"key": "bearer_getappointments_filter",
			"value": ""
		},
		{
			"key": "bearer_getappointments_filter_expiry_date",
			"value": ""
		}
	]
}
